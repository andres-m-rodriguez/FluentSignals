@namespace FluentSignals.Blazor.Components
@typeparam T
@using FluentSignals.Http.Core
@using FluentSignals.Http.Factories
@using FluentSignals.Contracts
@using Microsoft.Extensions.DependencyInjection
@inherits ComponentBase
@implements IDisposable
@inject IServiceProvider ServiceProvider

@if (_resource != null)
{
    @if (_resource.IsLoading.Value)
    {
        @if (Loading != null)
        {
            @Loading
        }
        else
        {
            <div class="d-flex justify-content-center align-items-center p-4">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    }
    else if (_resource.Error.Value != null)
    {
        @if (ErrorContent != null)
        {
            @ErrorContent(_resource.Error.Value)
        }
        else
        {
            <div class="alert alert-danger">
                <h4>Error</h4>
                <p>@_resource.Error.Value.Message</p>
                @if (ShowRetryButton)
                {
                    <button class="btn btn-primary" @onclick="RefreshAsync">Try Again</button>
                }
            </div>
        }
    }
    else if (_resource.SignalValue.Value != null)
    {
        @if (EmptyWhen != null && EmptyWhen(_resource.SignalValue.Value))
        {
            @if (Empty != null)
            {
                @Empty
            }
            else
            {
                <div class="alert alert-warning">
                    No data available.
                </div>
            }
        }
        else if (SuccessWithResource != null)
        {
            @SuccessWithResource((_resource.SignalValue.Value, _resource))
        }
        else if (Success != null)
        {
            @Success(_resource.SignalValue.Value)
        }
        else if (ChildContent != null)
        {
            @ChildContent(_resource.SignalValue.Value)
        }
    }
    else if (_resource.IsDataAvaible.Value && _resource.SignalValue.Value == null)
    {
        @if (Empty != null)
        {
            @Empty
        }
        else
        {
            <div class="alert alert-warning">
                No data available.
            </div>
        }
    }
}

@code {
    private HttpResource<T>? _resource;
    private readonly List<ISignalSubscriptionContract> _subscriptions = new();
    private HttpResourceFactory? _factory;
    private bool _isInitialized;
    private string? _previousUrl;
    private Func<HttpRequestMessage>? _previousRequestBuilder;
    private Func<HttpRequestMessage>? _previousDynamicRequestBuilder;
    private ISignal[]? _previousSignals;
    private HttpResource<T>? _previousResource;

    [Parameter]
    public string? Url { get; set; }

    [Parameter]
    public Func<HttpRequestMessage>? RequestBuilder { get; set; }

    [Parameter]
    public HttpResourceFactory? ResourceFactory { get; set; }

    [Parameter]
    public HttpClient? HttpClient { get; set; }

    [Parameter]
    public HttpResource<T>? Resource { get; set; }

    [Parameter]
    public bool LoadOnInit { get; set; } = true;

    [Parameter]
    public bool ShowRetryButton { get; set; } = true;

    [Parameter]
    public RenderFragment? Loading { get; set; }

    [Parameter]
    public RenderFragment<T>? Success { get; set; }

    [Parameter]
    public RenderFragment<(T Value, HttpResource<T> Resource)>? SuccessWithResource { get; set; }

    [Parameter]
    public RenderFragment<T>? ChildContent { get; set; }

    [Parameter]
    public RenderFragment? Empty { get; set; }

    [Parameter]
    public Func<T?, bool>? EmptyWhen { get; set; }

    [Parameter]
    public RenderFragment<Exception>? ErrorContent { get; set; }

    [Parameter]
    public EventCallback<T> OnDataLoaded { get; set; }

    [Parameter]
    public EventCallback<Exception> OnError { get; set; }

    [Parameter]
    public EventCallback<HttpResource<T>> OnResourceCreated { get; set; }

    [Parameter]
    public ISignal[]? SubscribeToSignals { get; set; }

    [Parameter]
    public Func<HttpRequestMessage>? DynamicRequestBuilder { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitializeResourceAsync();
        
        if (LoadOnInit && _resource != null && Resource == null)
        {
            await _resource.LoadData();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_isInitialized)
        {
            // Check if key parameters actually changed
            var needsReInit = false;
            
            // Check Resource change
            if (!ReferenceEquals(_previousResource, Resource))
            {
                needsReInit = true;
            }
            
            // Check URL change
            if (_previousUrl != Url)
            {
                needsReInit = true;
            }
            
            // Check RequestBuilder change
            if (!ReferenceEquals(_previousRequestBuilder, RequestBuilder))
            {
                needsReInit = true;
            }
            
            // Check DynamicRequestBuilder change
            if (!ReferenceEquals(_previousDynamicRequestBuilder, DynamicRequestBuilder))
            {
                needsReInit = true;
            }
            
            // Check SubscribeToSignals change
            if (!SignalArraysEqual(_previousSignals, SubscribeToSignals))
            {
                needsReInit = true;
            }

            if (needsReInit)
            {
                await InitializeResourceAsync();
                if (LoadOnInit && _resource != null)
                {
                    await _resource.LoadData();
                }
            }
        }
    }
    
    private bool SignalArraysEqual(ISignal[]? array1, ISignal[]? array2)
    {
        if (array1 == null && array2 == null) return true;
        if (array1 == null || array2 == null) return false;
        if (array1.Length != array2.Length) return false;
        
        for (int i = 0; i < array1.Length; i++)
        {
            if (!ReferenceEquals(array1[i], array2[i])) return false;
        }
        
        return true;
    }

    private async Task InitializeResourceAsync()
    {
        // Clean up existing resource
        DisposeResource();

        // Check if Resource is provided externally
        if (Resource != null)
        {
            _resource = Resource;
        }
        else
        {
            // Get factory
            _factory = ResourceFactory ?? ServiceProvider.GetService<HttpResourceFactory>();
            if (_factory == null)
            {
                throw new InvalidOperationException("HttpResourceFactory not found. Please provide ResourceFactory parameter or register HttpResourceFactory in DI.");
            }

            // Create resource based on parameters
            if (DynamicRequestBuilder != null && SubscribeToSignals != null && SubscribeToSignals.Length > 0)
            {
                // Use dynamic request builder with signal subscriptions
                _resource = _factory.CreateWithDynamicRequest<T>(DynamicRequestBuilder, SubscribeToSignals);
            }
            else if (RequestBuilder != null)
            {
                // Use provided request builder
                _resource = _factory.Create<T>(RequestBuilder);
                
                // Subscribe to signals if provided
                if (SubscribeToSignals != null && SubscribeToSignals.Length > 0)
                {
                    _resource.SubscribeTo(SubscribeToSignals);
                }
            }
            else if (!string.IsNullOrEmpty(Url))
            {
                // Use URL
                _resource = _factory.Create<T>(Url);
                
                // Subscribe to signals if provided
                if (SubscribeToSignals != null && SubscribeToSignals.Length > 0)
                {
                    _resource.SubscribeTo(SubscribeToSignals);
                }
            }
            else
            {
                throw new InvalidOperationException("Either Resource, Url, RequestBuilder, or DynamicRequestBuilder must be provided.");
            }
        }

        // Subscribe to state changes
        if (_resource != null)
        {
            _subscriptions.Add(_resource.SignalValue.Subscribe(() => 
            {
                if (_resource.SignalValue.Value != null)
                {
                    _ = OnDataLoaded.InvokeAsync(_resource.SignalValue.Value);
                }
                InvokeAsync(StateHasChanged);
            }));

            _subscriptions.Add(_resource.IsLoading.Subscribe(() => 
            {
                InvokeAsync(StateHasChanged);
            }));

            _subscriptions.Add(_resource.Error.Subscribe(() => 
            {
                if (_resource.Error.Value != null)
                {
                    _ = OnError.InvokeAsync(_resource.Error.Value);
                }
                InvokeAsync(StateHasChanged);
            }));

            _subscriptions.Add(_resource.IsDataAvaible.Subscribe(() => 
            {
                InvokeAsync(StateHasChanged);
            }));

            // Notify resource created only if we created it internally
            if (Resource is null)
            {
                await OnResourceCreated.InvokeAsync(_resource);
            }
        }

        // Store current parameter values to detect future changes
        _previousUrl = Url;
        _previousRequestBuilder = RequestBuilder;
        _previousDynamicRequestBuilder = DynamicRequestBuilder;
        _previousSignals = SubscribeToSignals;
        _previousResource = Resource;

        _isInitialized = true;
    }

    public async Task RefreshAsync()
    {
        if (_resource != null)
        {
            await _resource.LoadData();
        }
    }

    public HttpResource<T>? GetResource() => _resource;

    private void DisposeResource()
    {
        foreach (var subscription in _subscriptions)
        {
            subscription?.Dispose();
        }
        _subscriptions.Clear();

        // Only dispose the resource if we created it internally
        if (_resource != null && Resource == null)
        {
            _resource.Dispose();
        }
        _resource = null;
    }

    public void Dispose()
    {
        DisposeResource();
    }
}