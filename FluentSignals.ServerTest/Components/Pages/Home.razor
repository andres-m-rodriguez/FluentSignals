@page "/"
@rendermode InteractiveServer
@using FluentSignals.Implementations.Core
@using FluentSignals.ServerTest.Components

<PageTitle>FluentSignals - Reactive State Management for .NET</PageTitle>

<div class="home-page">
<div class="hero-section">
    <div class="hero-content">
        <h1 class="hero-title">
            <img src="/signal-logo-flow.svg" alt="FluentSignals Logo" class="logo-large" />
            FluentSignals
        </h1>
        <p class="hero-subtitle">
            Elegant reactive state management for .NET applications
        </p>
        <div class="hero-features">
            <div class="feature">✨ Simple & Intuitive API</div>
            <div class="feature">🚀 High Performance</div>
            <div class="feature">🔄 Reactive Updates</div>
            <div class="feature">🌐 Framework Agnostic</div>
        </div>
        <div class="hero-actions">
            <a href="/demos/signal" class="btn btn-primary btn-large">
                Explore Demos
            </a>
            <a href="/playground" class="btn btn-secondary btn-large">
                Try Playground
            </a>
        </div>
    </div>
</div>

<div class="content-section">
    <div class="section-header">
        <h2>Why FluentSignals?</h2>
        <p>Build reactive applications with confidence</p>
    </div>
    
    <div class="features-grid">
        <div class="feature-card">
            <div class="feature-icon">📡</div>
            <h3>Reactive Signals</h3>
            <p>Automatically propagate state changes throughout your application with minimal boilerplate.</p>
            <CodeBlock Code="@signalExample" Language="csharp" />
        </div>
        
        <div class="feature-card">
            <div class="feature-icon">⚡</div>
            <h3>Async Support</h3>
            <p>Handle asynchronous operations with built-in loading and error states.</p>
            <CodeBlock Code="@asyncExample" Language="csharp" />
        </div>
        
        <div class="feature-card">
            <div class="feature-icon">🌐</div>
            <h3>HTTP Resources</h3>
            <p>Declarative HTTP operations with automatic state management and error handling.</p>
            <CodeBlock Code="@httpExample" Language="csharp" />
        </div>
    </div>
</div>

<div class="showcase-section">
    <div class="section-header">
        <h2>Live Example</h2>
        <p>See FluentSignals in action</p>
    </div>
    
    <div class="live-demo">
        <div class="demo-controls">
            <h4>Counter with Computed Values</h4>
            <div class="counter-display">
                <div class="counter-value">@counter.Value</div>
                <div class="computed-values">
                    <span>Doubled: @doubled.Value</span>
                    <span>Squared: @squared.Value</span>
                    <span>Is Even: @isEven.Value</span>
                </div>
            </div>
            <div class="counter-actions">
                <button class="btn btn-primary" @onclick="() => counter.Value++">Increment</button>
                <button class="btn btn-secondary" @onclick="() => counter.Value--">Decrement</button>
                <button class="btn btn-outline" @onclick="() => counter.Value = 0">Reset</button>
            </div>
        </div>
        
        <div class="demo-code">
            <CodeBlock Code="@liveExampleCode" Language="csharp" Title="Live Code" />
        </div>
    </div>
</div>

<div class="getting-started-section">
    <div class="section-header">
        <h2>Get Started</h2>
        <p>Add FluentSignals to your project in seconds</p>
    </div>
    
    <div class="install-steps">
        <div class="step">
            <div class="step-number">1</div>
            <div class="step-content">
                <h4>Install the package</h4>
                <CodeBlock Code="dotnet add package FluentSignals" Language="bash" />
            </div>
        </div>
        
        <div class="step">
            <div class="step-number">2</div>
            <div class="step-content">
                <h4>Create your first signal</h4>
                <CodeBlock Code="@gettingStartedCode" Language="csharp" />
            </div>
        </div>
        
        <div class="step">
            <div class="step-number">3</div>
            <div class="step-content">
                <h4>Start building reactive apps!</h4>
                <a href="/demos/signal" class="btn btn-primary">View More Examples</a>
            </div>
        </div>
    </div>
</div>

@code {
    private TypedSignal<int> counter = new(0);
    private TypedSignal<int> doubled = new(0);
    private TypedSignal<int> squared = new(0);
    private TypedSignal<bool> isEven = new(true);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // Setup computed values
        counter.Subscribe(value =>
        {
            doubled.Value = value * 2;
            squared.Value = value * value;
            isEven.Value = value % 2 == 0;
            InvokeAsync(StateHasChanged);
        });
    }

    private string signalExample = @"// Create a reactive signal
var count = new TypedSignal<int>(0);

// Subscribe to changes
count.Subscribe(value => 
    Console.WriteLine($""Count: {value}""));

// Update triggers notifications
count.Value = 10; // Output: Count: 10";

    private string asyncExample = @"// Create async signal
var data = new AsyncTypedSignal<User>(null);

// Load data with automatic state management
await data.LoadAsync(async () => 
{
    return await userService.GetUserAsync();
});

// Check states
if (data.IsLoading.Value) // Show spinner
if (data.Error.Value != null) // Show error
if (data.Value != null) // Show data";

    private string httpExample = @"// Declarative HTTP in Blazor
<HttpResourceView T=""WeatherData[]"" 
                  Url=""/api/weather"">
    <Loading>
        <Spinner />
    </Loading>
    <Success Context=""data"">
        @foreach (var item in data) { }
    </Success>
    <NotFound>
        <p>Weather data not found</p>
    </NotFound>
</HttpResourceView>";

    private string liveExampleCode = @"// Reactive counter with computed values
var counter = new TypedSignal<int>(0);
var doubled = new TypedSignal<int>(0);
var squared = new TypedSignal<int>(0);
var isEven = new TypedSignal<bool>(true);

// Setup reactive computations
counter.Subscribe(value =>
{
    doubled.Value = value * 2;
    squared.Value = value * value;
    isEven.Value = value % 2 == 0;
});

// Update counter
counter.Value++; // All computed values update automatically";

    private string gettingStartedCode = @"using FluentSignals.Implementations.Core;

// Create signals
var name = new TypedSignal<string>(""World"");
var greeting = new TypedSignal<string>("""");

// Setup reactive binding
name.Subscribe(n => {
    greeting.Value = $""Hello, {n}!"";
});

// Change name updates greeting automatically
name.Value = ""FluentSignals""; 
// greeting.Value is now ""Hello, FluentSignals!""";
}

</div>
