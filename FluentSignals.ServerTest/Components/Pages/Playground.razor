@page "/playground"
@using FluentSignals.Implementations.Core
@using FluentSignals.ServerTest.Components
@using Microsoft.CodeAnalysis.CSharp.Scripting
@using Microsoft.CodeAnalysis.Scripting
@rendermode InteractiveServer


<div class="playground-page">
    <div class="page-header">
        <h1>FluentSignals Playground</h1>
        <p class="lead">Experiment with FluentSignals in an interactive environment</p>
    </div>

    <div class="playground-container">
        <div class="editor-panel">
            <div class="editor-header">
                <h3>Code Editor</h3>
                <div class="editor-actions">
                    <select value="@selectedExample" @onchange="LoadExample" class="example-select">
                        <option value="">-- Load Example --</option>
                        <option value="basic">Basic Signal</option>
                        <option value="computed">Computed Values</option>
                        <option value="async">Async Signal</option>
                        <option value="subscription">Subscriptions</option>
                    </select>
                    <button class="btn btn-primary" @onclick="RunCode">
                        @if (isRunning)
                        {
                            <span>Running...</span>
                        }
                        else
                        {
                            <span>Run Code</span>
                        }
                    </button>
                </div>
            </div>
            <div class="editor-content">
                <textarea @bind="userCode" @bind:event="oninput" class="code-editor" 
                          placeholder="Write your FluentSignals code here..."></textarea>
            </div>
        </div>

        <div class="output-panel">
            <div class="output-header">
                <h3>Output</h3>
                <button class="btn btn-outline" @onclick="ClearOutput">Clear</button>
            </div>
            <div class="output-content">
                @if (outputLines.Any())
                {
                    @foreach (var line in outputLines)
                    {
                        <div class="output-line @line.Type">
                            <span class="line-time">@line.Timestamp.ToString("HH:mm:ss.fff")</span>
                            <span class="line-content">@line.Content</span>
                        </div>
                    }
                }
                else
                {
                    <div class="output-placeholder">
                        Output will appear here when you run your code...
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="playground-info">
        <h3>Available APIs</h3>
        <div class="api-grid">
            <div class="api-card">
                <h4>Signal</h4>
                <code>new TypedSignal&lt;T&gt;(initialValue)</code>
                <p>Create reactive values that notify on change</p>
            </div>
            <div class="api-card">
                <h4>AsyncSignal</h4>
                <code>new AsyncTypedSignal&lt;T&gt;(initialValue)</code>
                <p>Handle async operations with loading/error states</p>
            </div>
            <div class="api-card">
                <h4>Subscribe</h4>
                <code>signal.Subscribe(value => { })</code>
                <p>React to signal changes</p>
            </div>
            <div class="api-card">
                <h4>LoadAsync</h4>
                <code>await signal.LoadAsync(async () => { })</code>
                <p>Load data asynchronously</p>
            </div>
        </div>
    </div>
</div>

@code {
    private string userCode = "";
    private string selectedExample = "";
    private bool isRunning = false;
    private List<OutputLine> outputLines = new();

    private Dictionary<string, string> codeExamples = new()
    {
        ["basic"] = @"// Create a signal
var counter = new TypedSignal<int>(0);

// Subscribe to changes
counter.Subscribe(value => 
{
    Console.WriteLine($""Counter changed to: {value}"");
});

// Update the value
counter.Value = 10;
counter.Value++;
counter.Value++;

Console.WriteLine($""Final value: {counter.Value}"");",

        ["computed"] = @"// Create source signals
var width = new TypedSignal<int>(10);
var height = new TypedSignal<int>(20);
var area = new TypedSignal<int>(0);

// Setup computed value
Action updateArea = () => area.Value = width.Value * height.Value;
width.Subscribe(_ => updateArea());
height.Subscribe(_ => updateArea());
updateArea();

Console.WriteLine($""Initial area: {area.Value}"");

// Change dimensions
width.Value = 15;
Console.WriteLine($""After width change: {area.Value}"");

height.Value = 30;
Console.WriteLine($""After height change: {area.Value}"");",

        ["async"] = @"// Create async signal
var dataSignal = new AsyncTypedSignal<string>(null);

// Subscribe to states
dataSignal.IsLoading.Subscribe(loading => 
{
    Console.WriteLine($""Loading: {loading}"");
});

dataSignal.Error.Subscribe(error => 
{
    if (error != null)
        Console.WriteLine($""Error: {error.Message}"");
});

// Load data
await dataSignal.LoadAsync(async () =>
{
    await Task.Delay(1000);
    return ""Data loaded successfully!"";
});

Console.WriteLine($""Result: {dataSignal.Value}"");",

        ["subscription"] = @"// Create temperature signal
var temperature = new TypedSignal<int>(20);
var alerts = new List<string>();

// Subscribe with condition
temperature.Subscribe(temp =>
{
    if (temp > 30)
    {
        var alert = $""High temperature alert: {temp}Â°C"";
        alerts.Add(alert);
        Console.WriteLine(alert);
    }
    else if (temp < 10)
    {
        var alert = $""Low temperature alert: {temp}Â°C"";
        alerts.Add(alert);
        Console.WriteLine(alert);
    }
    else
    {
        Console.WriteLine($""Temperature normal: {temp}Â°C"");
    }
});

// Test different temperatures
temperature.Value = 25; // Normal
temperature.Value = 35; // High alert
temperature.Value = 5;  // Low alert
temperature.Value = 20; // Normal again

Console.WriteLine($""\nTotal alerts: {alerts.Count}"");"
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // Load basic example by default
        userCode = codeExamples["basic"];
    }

    private void LoadExample(ChangeEventArgs e)
    {
        selectedExample = e.Value?.ToString() ?? "";
        if (!string.IsNullOrEmpty(selectedExample) && codeExamples.ContainsKey(selectedExample))
        {
            userCode = codeExamples[selectedExample];
        }
    }

    private async Task RunCode()
    {
        if (string.IsNullOrWhiteSpace(userCode) || isRunning) return;

        isRunning = true;
        outputLines.Clear();
        
        // Create a cancellation token for the 5-second timeout
        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
        
        try
        {
            // Create a custom console writer to capture output
            var writer = new StringWriter();
            var originalOut = Console.Out;
            Console.SetOut(writer);

            // Set up script options with required imports
            var options = ScriptOptions.Default
                .WithReferences(typeof(TypedSignal<>).Assembly)
                .WithImports(
                    "System",
                    "System.Linq",
                    "System.Threading.Tasks",
                    "FluentSignals.Implementations.Core",
                    "FluentSignals.Contracts"
                );

            // Run the script with timeout
            var scriptTask = CSharpScript.EvaluateAsync(userCode, options, cancellationToken: cts.Token);
            
            var completedTask = await Task.WhenAny(scriptTask, Task.Delay(5000, cts.Token));
            
            if (completedTask != scriptTask)
            {
                throw new TimeoutException("Code execution timed out after 5 seconds. Please check for infinite loops or long-running operations.");
            }

            await scriptTask; // Await the actual result

            Console.SetOut(originalOut);
            var output = writer.ToString();

            // Process output lines
            if (!string.IsNullOrEmpty(output))
            {
                var lines = output.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                foreach (var line in lines)
                {
                    outputLines.Add(new OutputLine(line, "success"));
                }
            }

            if (!outputLines.Any())
            {
                outputLines.Add(new OutputLine("Code executed successfully (no output)", "info"));
            }
        }
        catch (TimeoutException ex)
        {
            outputLines.Add(new OutputLine(ex.Message, "error"));
            outputLines.Add(new OutputLine("ðŸ’¡ Tip: Make sure your code doesn't contain infinite loops or very long operations.", "info"));
        }
        catch (CompilationErrorException ex)
        {
            outputLines.Add(new OutputLine("Compilation Error:", "error"));
            foreach (var diagnostic in ex.Diagnostics)
            {
                outputLines.Add(new OutputLine(diagnostic.ToString(), "error"));
            }
        }
        catch (Exception ex)
        {
            outputLines.Add(new OutputLine($"Runtime Error: {ex.Message}", "error"));
            if (ex.StackTrace != null)
            {
                outputLines.Add(new OutputLine("Stack trace:", "error"));
                var stackLines = ex.StackTrace.Split('\n').Take(5);
                foreach (var line in stackLines)
                {
                    outputLines.Add(new OutputLine(line.Trim(), "error"));
                }
            }
        }
        finally
        {
            isRunning = false;
            StateHasChanged();
        }
    }

    private void ClearOutput()
    {
        outputLines.Clear();
    }

    private class OutputLine
    {
        public DateTime Timestamp { get; }
        public string Content { get; }
        public string Type { get; }

        public OutputLine(string content, string type = "normal")
        {
            Timestamp = DateTime.Now;
            Content = content;
            Type = type;
        }
    }
}

<style>
    .playground-page {
        max-width: 1600px;
        margin: 0 auto;
        padding: 2rem;
    }

    .playground-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 3rem;
        height: 600px;
    }

    @@media (max-width: 1024px) {
        .playground-container {
            grid-template-columns: 1fr;
            height: auto;
        }
    }

    .editor-panel, .output-panel {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .editor-header, .output-header {
        padding: 1rem 1.5rem;
        background: #f8fafc;
        border-bottom: 1px solid #e5e7eb;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .editor-header h3, .output-header h3 {
        margin: 0;
        font-size: 1.125rem;
        color: #1e293b;
    }

    .editor-actions {
        display: flex;
        gap: 0.75rem;
        align-items: center;
    }

    .example-select {
        padding: 0.5rem 1rem;
        border: 1px solid #e5e7eb;
        border-radius: 6px;
        background: white;
        cursor: pointer;
    }

    .editor-content {
        flex: 1;
        position: relative;
    }

    .code-editor {
        width: 100%;
        height: 100%;
        padding: 1.5rem;
        border: none;
        font-family: 'Cascadia Code', 'Fira Code', monospace;
        font-size: 0.875rem;
        line-height: 1.6;
        resize: none;
        background: #1e1e1e;
        color: #d4d4d4;
    }

    .code-editor:focus {
        outline: none;
    }

    .output-content {
        flex: 1;
        padding: 1rem;
        background: #1e1e1e;
        overflow-y: auto;
        font-family: 'Cascadia Code', 'Fira Code', monospace;
        font-size: 0.875rem;
    }

    .output-placeholder {
        color: #6b7280;
        text-align: center;
        padding: 2rem;
    }

    .output-line {
        display: flex;
        gap: 1rem;
        padding: 0.25rem 0;
        border-bottom: 1px solid #2d2d30;
    }

    .line-time {
        color: #6b7280;
        font-size: 0.75rem;
        min-width: 80px;
    }

    .line-content {
        flex: 1;
        white-space: pre-wrap;
    }

    .output-line.normal .line-content {
        color: #d4d4d4;
    }

    .output-line.success .line-content {
        color: #4ade80;
    }

    .output-line.error .line-content {
        color: #f87171;
    }

    .output-line.info .line-content {
        color: #60a5fa;
    }

    .playground-info {
        background: #f8fafc;
        border-radius: 12px;
        padding: 2rem;
    }

    .playground-info h3 {
        margin-bottom: 1.5rem;
        color: #1e293b;
    }

    .api-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .api-card {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        border: 1px solid #e5e7eb;
    }

    .api-card h4 {
        margin: 0 0 0.5rem 0;
        color: #1e293b;
    }

    .api-card code {
        display: block;
        background: #f1f5f9;
        padding: 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
        color: #4f46e5;
    }

    .api-card p {
        margin: 0;
        color: #64748b;
        font-size: 0.875rem;
    }
</style>