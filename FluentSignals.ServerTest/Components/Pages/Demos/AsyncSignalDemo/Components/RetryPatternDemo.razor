@namespace FluentSignals.ServerTest.Components.Pages.Demos.AsyncSignalDemo.Components
@inherits SignalComponentBase
@using FluentSignals.Implementations.Core
@using FluentSignals.Blazor.Extensions
@using FluentSignals.Blazor.Components
@using FluentSignals.ServerTest.Components
@rendermode InteractiveServer

<div class="demo-content">
            <div class="retry-settings">
                <label>
                    Failure Rate:
                    <input type="range" min="0" max="100" @bind="failureRate" @bind:event="oninput" />
                    <span>@failureRate%</span>
                </label>
            </div>
            
            <div class="retry-status">
                <div class="status-card">
                    <h4>Attempt #@attemptCount</h4>
                    @if (retrySignal.IsLoading.Value)
                    {
                        <p>Trying...</p>
                    }
                    else if (retrySignal.Error.Value != null)
                    {
                        <p class="error">Failed: @retrySignal.Error.Value.Message</p>
                    }
                    else if (retrySignal.Value != null)
                    {
                        <p class="success">Success: @retrySignal.Value</p>
                    }
                </div>
                
                <div class="attempt-history">
                    <h4>History</h4>
                    @foreach (var attempt in attemptHistory.TakeLast(5).Reverse())
                    {
                        <div class="attempt-entry @(attempt.Success ? "success" : "failure")">
                            Attempt #@attempt.Number - @(attempt.Success ? "Success" : "Failed")
                        </div>
                    }
                </div>
            </div>
            
            <button class="btn btn-primary" @onclick="RunWithRetry" disabled="@retrySignal.IsLoading.Value">
                Run Operation
            </button>
            <CodeBlock Code="@retryPatternCode" />
</div>

@code {
    // Retry Pattern Demo
    private AsyncTypedSignal<string?> retrySignal = new(null);
    private int failureRate = 50;
    private int attemptCount = 0;
    private List<AttemptRecord> attemptHistory = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // Subscribe to the retry signal for UI updates
        SubscribeForUpdate(retrySignal);
    }

    // Retry Pattern
    private async Task RunWithRetry()
    {
        attemptCount = 0;
        var maxRetries = 3;
        
        for (int i = 0; i < maxRetries; i++)
        {
            attemptCount++;
            
            await retrySignal.LoadAsync(async () =>
            {
                await Task.Delay(500);
                
                var random = new Random();
                if (random.Next(100) < failureRate)
                {
                    throw new Exception("Random failure occurred");
                }
                
                return "Operation completed successfully!";
            });

            var success = retrySignal.Error.Value == null;
            attemptHistory.Add(new AttemptRecord(attemptCount, success));

            if (success) break;
            
            if (i < maxRetries - 1)
            {
                await Task.Delay(1000); // Wait before retry
            }
        }
    }

    private class AttemptRecord
    {
        public int Number { get; }
        public bool Success { get; }
        
        public AttemptRecord(int number, bool success)
        {
            Number = number;
            Success = success;
        }
    }

    // Code example
    private string retryPatternCode = @"// Implement retry with AsyncSignal
public async Task<T> LoadWithRetry<T>(
    AsyncTypedSignal<T> signal,
    Func<Task<T>> operation,
    int maxRetries = 3,
    int delayMs = 1000)
{
    for (int attempt = 1; attempt <= maxRetries; attempt++)
    {
        await signal.LoadAsync(operation);
        
        if (signal.Error.Value == null)
        {
            // Success
            return signal.Value;
        }
        
        if (attempt < maxRetries)
        {
            // Wait before retry
            await Task.Delay(delayMs * attempt);
        }
    }
    
    throw new Exception(
        $""Operation failed after {maxRetries} attempts"");
}

// Usage
var apiSignal = new AsyncTypedSignal<ApiData>(null);

try
{
    await LoadWithRetry(apiSignal, async () =>
    {
        return await apiClient.GetDataAsync();
    });
}
catch (Exception ex)
{
    Console.WriteLine($""All retries failed: {ex.Message}"");
}";
}

<style>
    .retry-settings {
        background: #f8fafc;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .retry-settings label {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .retry-status {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .status-card {
        background: white;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        padding: 1.5rem;
        text-align: center;
    }

    .status-card h4 {
        margin: 0 0 1rem 0;
    }

    .status-card .error {
        color: #dc2626;
    }

    .status-card .success {
        color: #16a34a;
    }

    .attempt-history {
        background: #1e1e1e;
        color: #d4d4d4;
        padding: 1rem;
        border-radius: 8px;
    }

    .attempt-history h4 {
        margin: 0 0 0.5rem 0;
        color: #cccccc;
    }

    .attempt-entry {
        padding: 0.25rem 0.5rem;
        margin-bottom: 0.25rem;
        border-radius: 4px;
        font-size: 0.875rem;
    }

    .attempt-entry.success {
        background: #16a34a20;
        color: #16a34a;
    }

    .attempt-entry.failure {
        background: #dc262620;
        color: #dc2626;
    }
</style>