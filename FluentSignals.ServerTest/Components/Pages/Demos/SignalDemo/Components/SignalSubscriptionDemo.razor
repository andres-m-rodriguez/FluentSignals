@namespace FluentSignals.ServerTest.Components.Pages.Demos.SignalDemo.Components
@using FluentSignals.Implementations.Core
@using FluentSignals.Blazor.Components
@using FluentSignals.ServerTest.Components
@inherits SignalComponentBase
@rendermode InteractiveServer

<div class="demo-content">
            <div class="value-display">
                <span class="label">Temperature:</span>
                <span class="value">@temperature.Value°C</span>
            </div>
            <div class="slider-group">
                <input type="range" min="-20" max="50" @bind="temperature.Value" @bind:event="oninput" />
                <span class="range-value">@temperature.Value°C</span>
            </div>
            <div class="status-display @GetTemperatureClass()">
                @temperatureStatus
            </div>
            <div class="log-display">
                <h4>Change Log:</h4>
                <div class="log-entries">
                    @foreach (var log in temperatureLogs.TakeLast(5).Reverse())
                    {
                        <div class="log-entry">@log</div>
                    }
                </div>
            </div>
            <TabbedCodeBlock CSharpCode="@subscriptionCode" RazorCode="@subscriptionRazorCode" />
</div>

@code {
    // Signal Subscription Demo
    private TypedSignal<int> temperature = new(20);
    private string temperatureStatus = "Comfortable";
    private List<string> temperatureLogs = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Setup temperature subscription
        SetupTemperatureSubscription();

        // Subscribe to temperature signal for UI updates
        SubscribeForUpdate(temperature);
    }

    private void SetupTemperatureSubscription()
    {
        temperature.Subscribe(temp =>
        {
            temperatureStatus = temp switch
            {
                < 0 => "Freezing! 🥶",
                < 10 => "Cold 🧊",
                < 20 => "Cool 🌤️",
                < 30 => "Comfortable 😊",
                _ => "Hot! 🔥"
            };

            temperatureLogs.Add($"{DateTime.Now:HH:mm:ss} - Temperature changed to {temp}°C");
            InvokeAsync(StateHasChanged);
        });
    }

    private string GetTemperatureClass()
    {
        var temp = temperature.Value;
        if (temp < 0) return "freezing";
        if (temp < 10) return "cold";
        if (temp < 20) return "cool";
        if (temp < 30) return "comfortable";
        return "hot";
    }

    // Code examples
    private string subscriptionCode = @"using FluentSignals.Implementations.Core;

public partial class SubscriptionDemo
{
    private TypedSignal<int> temperature = new(20);
    private string temperatureStatus = ""Comfortable"";
    private List<string> temperatureLogs = new();

    protected override void OnInitialized()
    {
        temperature.Subscribe(temp =>
        {
            temperatureStatus = temp switch
            {
                < 0 => ""Freezing! 🥶"",
                < 10 => ""Cold 🧊"",
                < 20 => ""Cool 🌤️"",
                < 30 => ""Comfortable 😊"",
                _ => ""Hot! 🔥""
            };

            temperatureLogs.Add($""{DateTime.Now:HH:mm:ss} - Temperature changed to {temp}°C"");
            InvokeAsync(StateHasChanged);
            return temp;
        });
    }
    
    private string GetTemperatureClass()
    {
        return temperature.Value switch
        {
            < 0 => ""freezing"",
            < 10 => ""cold"",
            < 20 => ""cool"",
            < 30 => ""comfortable"",
            _ => ""hot""
        };
    }
}";

    private string subscriptionRazorCode = @"<div class=""value-display"">
    <span class=""label"">Temperature:</span>
    <span class=""value"">@temperature.Value°C</span>
</div>

<div class=""slider-group"">
    <input type=""range"" min=""-20"" max=""50"" 
           @bind=""temperature.Value"" @bind:event=""oninput"" />
    <span class=""range-value"">@temperature.Value°C</span>
</div>

<div class=""status-display @GetTemperatureClass()"">
    @temperatureStatus
</div>

<div class=""log-display"">
    <h4>Change Log:</h4>
    <div class=""log-entries"">
        @foreach (var log in temperatureLogs.TakeLast(5).Reverse())
        {
            <div class=""log-entry"">@log</div>
        }
    </div>
</div>";
}

<style>
    .demo-content {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .value-display {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        background: #f8fafc;
        border-radius: 8px;
    }

    .value-display .label {
        font-weight: 600;
        color: #64748b;
    }

    .value-display .value {
        font-size: 2rem;
        font-weight: 700;
        color: #1e293b;
    }

    .slider-group {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .slider-group input[type="range"] {
        flex: 1;
    }

    .range-value {
        min-width: 50px;
        text-align: right;
        font-weight: 600;
    }

    .status-display {
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        font-weight: 600;
        transition: all 0.3s;
    }

    .status-display.freezing {
        background: #dbeafe;
        color: #1e3a8a;
    }

    .status-display.cold {
        background: #e0f2fe;
        color: #0369a1;
    }

    .status-display.cool {
        background: #f0fdf4;
        color: #166534;
    }

    .status-display.comfortable {
        background: #fef3c7;
        color: #92400e;
    }

    .status-display.hot {
        background: #fee2e2;
        color: #991b1b;
    }

    .log-display {
        background: #1e1e1e;
        color: #d4d4d4;
        padding: 1rem;
        border-radius: 8px;
    }

    .log-display h4 {
        margin: 0 0 0.5rem 0;
        color: #cccccc;
    }

    .log-entries {
        font-family: 'Cascadia Code', monospace;
        font-size: 0.875rem;
    }

    .log-entry {
        padding: 0.25rem 0;
        border-bottom: 1px solid #2d2d30;
    }

    .log-entry:last-child {
        border-bottom: none;
    }
</style>