@rendermode InteractiveServer

<div id="loading-overlay-connect" class="@(_isLoading ? "active" : "")">
    <div class="connection-container">
        <!-- Central hub -->
        <div class="central-hub">
            <div class="hub-core">
                <span class="hub-icon">âš¡</span>
            </div>
            <div class="hub-ring ring-1"></div>
            <div class="hub-ring ring-2"></div>
            <div class="hub-ring ring-3"></div>
        </div>
        
        <!-- Signal sources trying to connect -->
        <div class="signal-sources">
            @for (int i = 0; i < 6; i++)
            {
                <div class="signal-source source-@i">
                    <div class="source-dot"></div>
                    <svg class="connection-path" viewBox="0 0 400 400">
                        <path class="path-line" d="M200,200 Q200,100 200,50" />
                        <circle class="signal-pulse" r="3" fill="#667eea">
                            <animateMotion dur="2s" repeatCount="indefinite" begin="@(i * 0.3)s">
                                <mpath href="#connection-@i" />
                            </animateMotion>
                        </circle>
                    </svg>
                </div>
            }
        </div>
        
        <!-- Connection paths -->
        <svg class="connection-svg" viewBox="0 0 400 400">
            <defs>
                <radialGradient id="hub-gradient">
                    <stop offset="0%" stop-color="#667eea" stop-opacity="0.8" />
                    <stop offset="100%" stop-color="#764ba2" stop-opacity="0.2" />
                </radialGradient>
                
                <!-- Define connection paths -->
                <path id="connection-0" d="M200,50 Q200,125 200,200" />
                <path id="connection-1" d="M350,125 Q275,162.5 200,200" />
                <path id="connection-2" d="M350,275 Q275,237.5 200,200" />
                <path id="connection-3" d="M200,350 Q200,275 200,200" />
                <path id="connection-4" d="M50,275 Q125,237.5 200,200" />
                <path id="connection-5" d="M50,125 Q125,162.5 200,200" />
            </defs>
            
            <!-- Draw visible connection attempts -->
            @for (int i = 0; i < 6; i++)
            {
                <path class="connection-attempt attempt-@i" 
                      stroke="url(#hub-gradient)" 
                      stroke-width="2" 
                      fill="none"
                      stroke-dasharray="150"
                      stroke-dashoffset="150">
                    <animate attributeName="stroke-dashoffset" 
                             values="150;0;0;150" 
                             dur="3s" 
                             begin="@(i * 0.5)s" 
                             repeatCount="indefinite" />
                    <animate attributeName="opacity" 
                             values="0;1;1;0" 
                             dur="3s" 
                             begin="@(i * 0.5)s" 
                             repeatCount="indefinite" />
                </path>
            }
        </svg>
        
        <!-- Status messages -->
        <div class="connection-status">
            <div class="status-text">
                <span class="status-message message-1">Initializing FluentSignals...</span>
                <span class="status-message message-2">Establishing connections...</span>
                <span class="status-message message-3">Synchronizing state...</span>
                <span class="status-message message-4">Almost ready...</span>
            </div>
            <div class="status-dots">
                <span class="dot"></span>
                <span class="dot"></span>
                <span class="dot"></span>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(3000);
            _isLoading = false;
            StateHasChanged();
        }
    }
}