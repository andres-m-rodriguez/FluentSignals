@page "/concepts/typed-signals"
@namespace FluentSignals.Web.Shared.Features.CoreConcepts
@using FluentSignals.Web.Shared.Common.Components

<PageTitle>Typed Signals - FluentSignals</PageTitle>

<div class="concept-page">
    <div class="concept-hero">
        <h1 class="concept-title">Typed Signals</h1>
        <p class="concept-subtitle">Type-safe reactive state with complex objects</p>
    </div>

    <section class="concept-section">
        <h2>Why Typed Signals?</h2>
        <p>
            Typed signals provide compile-time type safety for your reactive state. They ensure that your signals 
            can only contain values of a specific type, preventing runtime errors and providing better IntelliSense 
            support in your IDE.
        </p>
    </section>

    <section class="concept-section">
        <h2>Creating Typed Signals</h2>
        <p>Use <code>TypedSignal&lt;T&gt;</code> or the generic <code>Signal&lt;T&gt;</code> for type-safe signals:</p>
        
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="comment">// Simple types</span>
<span class="keyword">var</span> age = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">25</span>);
<span class="keyword">var</span> price = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">19.99m</span>);
<span class="keyword">var</span> isActive = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">bool</span>&gt;(<span class="keyword">true</span>);

<span class="comment">// Complex types</span>
<span class="keyword">var</span> user = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">User</span>&gt;(<span class="keyword">new</span> <span class="type">User</span> { Id = <span class="number">1</span>, Name = <span class="string">"Alice"</span> });
<span class="keyword">var</span> items = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">List</span>&lt;<span class="type">Product</span>&gt;&gt;(<span class="keyword">new</span> <span class="type">List</span>&lt;<span class="type">Product</span>&gt;());

<span class="comment">// Nullable types</span>
<span class="keyword">var</span> selectedItem = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">Product?</span>&gt;(<span class="keyword">null</span>);
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Working with Complex Objects</h2>
        <p>Typed signals excel at managing complex state objects:</p>
        
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="keyword">public class</span> <span class="type">UserProfile</span>
{
    <span class="keyword">public int</span> Id { <span class="keyword">get</span>; <span class="keyword">set</span>; }
    <span class="keyword">public string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }
    <span class="keyword">public string</span> Email { <span class="keyword">get</span>; <span class="keyword">set</span>; }
    <span class="keyword">public</span> <span class="type">DateTime</span> CreatedAt { <span class="keyword">get</span>; <span class="keyword">set</span>; }
    <span class="keyword">public</span> <span class="type">List</span>&lt;<span class="keyword">string</span>&gt; Roles { <span class="keyword">get</span>; <span class="keyword">set</span>; } = <span class="keyword">new</span>();
}

<span class="comment">// Create a signal with a complex object</span>
<span class="keyword">var</span> profile = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">UserProfile</span>&gt;(<span class="keyword">new</span> <span class="type">UserProfile</span>
{
    Id = <span class="number">1</span>,
    Name = <span class="string">"John Doe"</span>,
    Email = <span class="string">"john@example.com"</span>,
    CreatedAt = <span class="type">DateTime</span>.Now
});

<span class="comment">// Update the entire object</span>
profile.Value = <span class="keyword">new</span> <span class="type">UserProfile</span> { <span class="comment">/* new data */</span> };

<span class="comment">// Read properties</span>
<span class="type">Console</span>.<span class="method">WriteLine</span>($<span class="string">"User: {profile.Value.Name}"</span>);
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Updating Nested Properties</h2>
        <p>When working with complex objects, you need to create new instances to trigger updates:</p>
        
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="comment">// ❌ This won't trigger updates</span>
profile.Value.Name = <span class="string">"Jane Doe"</span>; <span class="comment">// Signal won't notify subscribers</span>

<span class="comment">// ✅ Create a new object to trigger updates</span>
profile.Value = <span class="keyword">new</span> <span class="type">UserProfile</span>
{
    Id = profile.Value.Id,
    Name = <span class="string">"Jane Doe"</span>, <span class="comment">// Changed property</span>
    Email = profile.Value.Email,
    CreatedAt = profile.Value.CreatedAt,
    Roles = profile.Value.Roles
};

<span class="comment">// ✅ Or use with pattern for cleaner syntax</span>
profile.Value = profile.Value <span class="keyword">with</span> { Name = <span class="string">"Jane Doe"</span> }; <span class="comment">// For records</span>
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Collections in Typed Signals</h2>
        <p>Managing collections requires special attention to trigger updates:</p>
        
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="keyword">var</span> todos = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">List</span>&lt;<span class="type">TodoItem</span>&gt;&gt;(<span class="keyword">new</span> <span class="type">List</span>&lt;<span class="type">TodoItem</span>&gt;());

<span class="comment">// ❌ This won't trigger updates</span>
todos.Value.<span class="method">Add</span>(<span class="keyword">new</span> <span class="type">TodoItem</span> { Title = <span class="string">"New Task"</span> });

<span class="comment">// ✅ Create a new list to trigger updates</span>
todos.Value = todos.Value.<span class="method">Concat</span>(<span class="keyword">new</span>[] { <span class="keyword">new</span> <span class="type">TodoItem</span> { Title = <span class="string">"New Task"</span> } }).<span class="method">ToList</span>();

<span class="comment">// ✅ Or use spread pattern</span>
todos.Value = [..todos.Value, <span class="keyword">new</span> <span class="type">TodoItem</span> { Title = <span class="string">"New Task"</span> }];

<span class="comment">// ✅ For removing items</span>
todos.Value = todos.Value.<span class="method">Where</span>(t =&gt; t.Id != itemId).<span class="method">ToList</span>();

<span class="comment">// ✅ For updating items</span>
todos.Value = todos.Value.<span class="method">Select</span>(t =&gt; t.Id == itemId 
    ? t <span class="keyword">with</span> { Completed = <span class="keyword">true</span> } 
    : t).<span class="method">ToList</span>();
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Complete Example: Todo List</h2>
        <CodeBlock Title="Complete Example: Todo List" Language="CodeBlock.CodeLanguage.CSharp">
<span class="comment">// Define a todo item record</span>
<span class="keyword">public record</span> <span class="type">TodoItem</span>(<span class="type">int</span> Id, <span class="keyword">string</span> Title, <span class="keyword">bool</span> Completed = <span class="keyword">false</span>);

<span class="comment">// Create a typed signal for the todo list</span>
<span class="keyword">var</span> todos = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">List</span>&lt;<span class="type">TodoItem</span>&gt;&gt;(<span class="keyword">new</span> <span class="type">List</span>&lt;<span class="type">TodoItem</span>&gt;());
<span class="keyword">var</span> updateCount = <span class="number">0</span>;

<span class="comment">// Subscribe to changes</span>
todos.<span class="method">Subscribe</span>(todoList =&gt; 
{
    updateCount++;
    <span class="type">Console</span>.<span class="method">WriteLine</span>($<span class="string">"Todos updated ({updateCount} times): {todoList.Count} items"</span>);
});

<span class="comment">// Add a new todo</span>
<span class="keyword">void</span> <span class="method">AddTodo</span>(<span class="keyword">string</span> title)
{
    <span class="keyword">var</span> newTodo = <span class="keyword">new</span> <span class="type">TodoItem</span>(<span class="type">Random</span>.<span class="method">Next</span>(<span class="number">1000</span>), title);
    todos.Value = [..todos.Value, newTodo];
}

<span class="comment">// Toggle completion</span>
<span class="keyword">void</span> <span class="method">ToggleTodo</span>(<span class="type">int</span> id)
{
    todos.Value = todos.Value.<span class="method">Select</span>(t =&gt; 
        t.Id == id ? t <span class="keyword">with</span> { Completed = !t.Completed } : t
    ).<span class="method">ToList</span>();
}

<span class="comment">// Remove a todo</span>
<span class="keyword">void</span> <span class="method">RemoveTodo</span>(<span class="type">int</span> id)
{
    todos.Value = todos.Value.<span class="method">Where</span>(t =&gt; t.Id != id).<span class="method">ToList</span>();
}

<span class="comment">// Usage</span>
<span class="method">AddTodo</span>(<span class="string">"Learn FluentSignals"</span>);     <span class="comment">// Triggers update</span>
<span class="method">AddTodo</span>(<span class="string">"Build reactive app"</span>);      <span class="comment">// Triggers update</span>
<span class="method">ToggleTodo</span>(todos.Value[<span class="number">0</span>].Id);      <span class="comment">// Triggers update</span>
<span class="method">RemoveTodo</span>(todos.Value[<span class="number">1</span>].Id);      <span class="comment">// Triggers update</span>
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Type Constraints</h2>
        <p>You can create custom typed signal classes with constraints:</p>
        
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="comment">// Signal that only accepts positive numbers</span>
<span class="keyword">public class</span> <span class="type">PositiveSignal</span>&lt;<span class="type">T</span>&gt; : <span class="type">TypedSignal</span>&lt;<span class="type">T</span>&gt; <span class="keyword">where</span> <span class="type">T</span> : <span class="type">INumber</span>&lt;<span class="type">T</span>&gt;
{
    <span class="keyword">public</span> <span class="method">PositiveSignal</span>(<span class="type">T</span> initialValue) : <span class="keyword">base</span>(initialValue)
    {
        <span class="keyword">if</span> (initialValue.<span class="method">CompareTo</span>(<span class="type">T</span>.Zero) &lt; <span class="number">0</span>)
            <span class="keyword">throw new</span> <span class="type">ArgumentException</span>(<span class="string">"Value must be positive"</span>);
    }

    <span class="keyword">public override</span> <span class="type">T</span> Value
    {
        <span class="keyword">get</span> =&gt; <span class="keyword">base</span>.Value;
        <span class="keyword">set</span>
        {
            <span class="keyword">if</span> (value.<span class="method">CompareTo</span>(<span class="type">T</span>.Zero) &lt; <span class="number">0</span>)
                <span class="keyword">throw new</span> <span class="type">ArgumentException</span>(<span class="string">"Value must be positive"</span>);
            <span class="keyword">base</span>.Value = value;
        }
    }
}
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Best Practices</h2>
        <ul class="best-practices">
            <li>
                <strong>Use immutable updates</strong> - Always create new objects instead of mutating existing ones 
                to ensure change detection works correctly.
            </li>
            <li>
                <strong>Consider using records</strong> - C# records provide built-in immutability and the 
                <code>with</code> expression for easy updates.
            </li>
            <li>
                <strong>Avoid deep nesting</strong> - Deeply nested objects can be hard to update. Consider 
                flattening your state structure.
            </li>
            <li>
                <strong>Use appropriate collection types</strong> - <code>ImmutableList&lt;T&gt;</code> or 
                <code>ImmutableArray&lt;T&gt;</code> can help enforce immutability.
            </li>
        </ul>
    </section>

    <section class="concept-section">
        <h2>Performance Tips</h2>
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="comment">// For large collections, consider using specialized update methods</span>
<span class="keyword">public static class</span> <span class="type">SignalExtensions</span>
{
    <span class="keyword">public static void</span> <span class="method">AddItem</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">this</span> <span class="type">TypedSignal</span>&lt;<span class="type">List</span>&lt;<span class="type">T</span>&gt;&gt; signal, <span class="type">T</span> item)
    {
        signal.Value = [..signal.Value, item];
    }
    
    <span class="keyword">public static void</span> <span class="method">RemoveItem</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">this</span> <span class="type">TypedSignal</span>&lt;<span class="type">List</span>&lt;<span class="type">T</span>&gt;&gt; signal, <span class="type">Predicate</span>&lt;<span class="type">T</span>&gt; predicate)
    {
        signal.Value = signal.Value.<span class="method">Where</span>(x =&gt; !predicate(x)).<span class="method">ToList</span>();
    }
    
    <span class="keyword">public static void</span> <span class="method">UpdateItem</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">this</span> <span class="type">TypedSignal</span>&lt;<span class="type">List</span>&lt;<span class="type">T</span>&gt;&gt; signal, 
        <span class="type">Predicate</span>&lt;<span class="type">T</span>&gt; predicate, <span class="type">Func</span>&lt;<span class="type">T</span>, <span class="type">T</span>&gt; updater)
    {
        signal.Value = signal.Value.<span class="method">Select</span>(x =&gt; predicate(x) ? updater(x) : x).<span class="method">ToList</span>();
    }
}
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Next Steps</h2>
        <p>
            Continue learning about advanced signal types:
        </p>
        <div class="next-steps">
            <a href="/concepts/computed-signals" class="next-link">
                <span class="next-icon">🔄</span>
                <span class="next-text">Computed Signals</span>
            </a>
            <a href="/concepts/async-signals" class="next-link">
                <span class="next-icon">⚡</span>
                <span class="next-text">Async Signals</span>
            </a>
        </div>
    </section>
</div>
 
<style>
    .concept-page {
        max-width: 900px;
        margin: 0 auto;
        padding: 2rem 1rem;
        color: #e0e0e0;
    }

    .concept-hero {
        text-align: center;
        padding: 3rem 0;
        margin-bottom: 3rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .concept-title {
        font-size: 3rem;
        font-weight: 800;
        margin-bottom: 1rem;
        background: linear-gradient(135deg, #fff 0%, #999 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .concept-subtitle {
        font-size: 1.25rem;
        color: #999;
    }

    .concept-section {
        margin-bottom: 3rem;
    }

    .concept-section h2 {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #fff;
    }

    .concept-section h3 {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 1.5rem 0 0.75rem;
        color: #fff;
    }

    .concept-section p {
        line-height: 1.7;
        margin-bottom: 1rem;
        color: #ccc;
    }

    .best-practices {
        list-style: none;
        padding: 0;
    }

    .best-practices li {
        padding: 0.75rem 0;
        padding-left: 2rem;
        position: relative;
        color: #ccc;
    }

    .best-practices li:before {
        content: "✓";
        position: absolute;
        left: 0;
        color: #4CAF50;
        font-weight: bold;
    }

    .best-practices strong {
        color: #fff;
    }

    .next-steps {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .next-link {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        padding: 1.5rem;
        background: rgba(255, 255, 255, 0.02);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 0.5rem;
        text-decoration: none;
        color: #fff;
        transition: all 0.2s;
    }

    .next-link:hover {
        background: rgba(255, 255, 255, 0.05);
        border-color: rgba(255, 255, 255, 0.2);
        transform: translateY(-2px);
    }

    .next-icon {
        font-size: 2rem;
    }

    .next-text {
        font-weight: 500;
    }
</style>

