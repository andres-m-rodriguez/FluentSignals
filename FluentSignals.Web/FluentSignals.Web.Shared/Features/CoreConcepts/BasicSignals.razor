@page "/concepts/basic-signals"
@namespace FluentSignals.Web.Shared.Features.CoreConcepts
@using FluentSignals.Implementations.Core
@using FluentSignals.Web.Shared.Common.Components

<PageTitle>Basic Signals - FluentSignals</PageTitle>
<div class="concept-page content-page">
    <div class="concept-hero">
        <h1 class="concept-title">Basic Signals</h1>
        <p class="concept-subtitle">The foundation of reactive state management</p>
    </div>

    <section class="concept-section">
        <h2>What are Signals?</h2>
        <p>
            Signals are the core primitive of FluentSignals. The basic <code>Signal</code> class is the bare-bones 
            foundation that provides the publish-subscribe pattern. It handles subscriber management and notifications,
            serving as the base class for all other signal types in the framework.
        </p>
    </section>

    <section class="concept-section">
        <h2>The Core Signal API</h2>
        <p>The basic <code>Signal</code> class provides these essential methods:</p>
        
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="comment">// Create a basic signal</span>
<span class="keyword">var</span> signal = <span class="keyword">new</span> <span class="type">Signal</span>();

<span class="comment">// Subscribe another signal to receive notifications</span>
<span class="keyword">var</span> dependentSignal = <span class="keyword">new</span> <span class="type">Signal</span>();
<span class="keyword">var</span> subscription = signal.<span class="method">Subscribe</span>(dependentSignal);

<span class="comment">// Manually trigger notifications to all subscribers</span>
signal.<span class="method">Notify</span>();

<span class="comment">// Unsubscribe when done</span>
signal.<span class="method">Unsubscribe</span>(subscription.SubscriptionId);

<span class="comment">// Or dispose the subscription</span>
subscription.<span class="method">Dispose</span>();
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Extending Signal for Custom Types</h2>
        <p>The power of the basic <code>Signal</code> class is that you can extend it to create your own reactive types:</p>
        
        <CodeBlock Title="Creating a Custom Counter Signal" Language="CodeBlock.CodeLanguage.CSharp">
<span class="keyword">public</span> <span class="keyword">class</span> <span class="type">CounterSignal</span> : <span class="type">Signal</span>
{
    <span class="keyword">private</span> <span class="type">int</span> _count;
    
    <span class="keyword">public</span> <span class="type">int</span> Count 
    { 
        <span class="keyword">get</span> =&gt; _count;
        <span class="keyword">private</span> <span class="keyword">set</span>
        {
            _count = <span class="keyword">value</span>;
            <span class="method">Notify</span>(); <span class="comment">// Notify all subscribers</span>
        }
    }
    
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="method">Increment</span>() =&gt; Count++;
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="method">Decrement</span>() =&gt; Count--;
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="method">Reset</span>() =&gt; Count = <span class="number">0</span>;
}

<span class="comment">// Usage</span>
<span class="keyword">var</span> counter = <span class="keyword">new</span> <span class="type">CounterSignal</span>();
counter.<span class="method">Increment</span>(); <span class="comment">// Notifies subscribers</span>
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Advanced Custom Signal Example</h2>
        <p>Here's a more sophisticated example that adds validation and change tracking:</p>
        
        <CodeBlock Title="Temperature Signal with Validation" Language="CodeBlock.CodeLanguage.CSharp">
<span class="keyword">public</span> <span class="keyword">class</span> <span class="type">TemperatureSignal</span> : <span class="type">Signal</span>
{
    <span class="keyword">private</span> <span class="type">double</span> _celsius;
    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="type">double</span> _minTemp;
    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="type">double</span> _maxTemp;
    
    <span class="keyword">public</span> <span class="method">TemperatureSignal</span>(<span class="type">double</span> initial = <span class="number">20.0</span>, 
                             <span class="type">double</span> min = <span class="number">-273.15</span>, 
                             <span class="type">double</span> max = <span class="number">1000.0</span>)
    {
        _minTemp = min;
        _maxTemp = max;
        Celsius = initial;
    }
    
    <span class="keyword">public</span> <span class="type">double</span> Celsius 
    { 
        <span class="keyword">get</span> =&gt; _celsius;
        <span class="keyword">set</span>
        {
            <span class="keyword">if</span> (<span class="keyword">value</span> &lt; _minTemp || <span class="keyword">value</span> &gt; _maxTemp)
                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">ArgumentOutOfRangeException</span>();
                
            <span class="keyword">if</span> (<span class="type">Math</span>.<span class="method">Abs</span>(_celsius - <span class="keyword">value</span>) &gt; <span class="number">0.01</span>)
            {
                _celsius = <span class="keyword">value</span>;
                <span class="method">Notify</span>();
            }
        }
    }
    
    <span class="keyword">public</span> <span class="type">double</span> Fahrenheit 
    {
        <span class="keyword">get</span> =&gt; _celsius * <span class="number">9</span> / <span class="number">5</span> + <span class="number">32</span>;
        <span class="keyword">set</span> =&gt; Celsius = (<span class="keyword">value</span> - <span class="number">32</span>) * <span class="number">5</span> / <span class="number">9</span>;
    }
}
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Signal Chaining and Composition</h2>
        <p>Basic signals can be chained together to create reactive flows:</p>
        
        <CodeBlock Title="Creating a Reactive Chain" Language="CodeBlock.CodeLanguage.CSharp">
<span class="comment">// Create a chain of signals</span>
<span class="keyword">var</span> inputSignal = <span class="keyword">new</span> <span class="type">Signal</span>();
<span class="keyword">var</span> processingSignal = <span class="keyword">new</span> <span class="type">Signal</span>();
<span class="keyword">var</span> outputSignal = <span class="keyword">new</span> <span class="type">Signal</span>();

<span class="comment">// Chain them together</span>
inputSignal.<span class="method">Subscribe</span>(processingSignal);
processingSignal.<span class="method">Subscribe</span>(outputSignal);

<span class="comment">// Override Notify in custom signals for processing</span>
<span class="keyword">public</span> <span class="keyword">class</span> <span class="type">ProcessingSignal</span> : <span class="type">Signal</span>
{
    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="method">Notify</span>()
    {
        <span class="comment">// Do some processing</span>
        <span class="type">Console</span>.<span class="method">WriteLine</span>(<span class="string">"Processing..."</span>);
        
        <span class="comment">// Then notify subscribers</span>
        <span class="keyword">base</span>.<span class="method">Notify</span>();
    }
}

<span class="comment">// Trigger the chain</span>
inputSignal.<span class="method">Notify</span>(); <span class="comment">// Cascades through all signals</span>
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Complete Example: Building a State Machine</h2>
        <CodeBlock Title="State Machine Using Basic Signals" Language="CodeBlock.CodeLanguage.CSharp">
<span class="keyword">public</span> <span class="keyword">enum</span> <span class="type">State</span> { Idle, Loading, Success, Error }

<span class="keyword">public</span> <span class="keyword">class</span> <span class="type">StateMachineSignal</span> : <span class="type">Signal</span>
{
    <span class="keyword">private</span> <span class="type">State</span> _currentState = <span class="type">State</span>.Idle;
    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="type">Dictionary</span>&lt;<span class="type">State</span>, <span class="type">List</span>&lt;<span class="type">State</span>&gt;&gt; _validTransitions;
    
    <span class="keyword">public</span> <span class="method">StateMachineSignal</span>()
    {
        _validTransitions = <span class="keyword">new</span> <span class="type">Dictionary</span>&lt;<span class="type">State</span>, <span class="type">List</span>&lt;<span class="type">State</span>&gt;&gt;
        {
            { <span class="type">State</span>.Idle, <span class="keyword">new</span> <span class="type">List</span>&lt;<span class="type">State</span>&gt; { <span class="type">State</span>.Loading } },
            { <span class="type">State</span>.Loading, <span class="keyword">new</span> <span class="type">List</span>&lt;<span class="type">State</span>&gt; { <span class="type">State</span>.Success, <span class="type">State</span>.Error } },
            { <span class="type">State</span>.Success, <span class="keyword">new</span> <span class="type">List</span>&lt;<span class="type">State</span>&gt; { <span class="type">State</span>.Idle } },
            { <span class="type">State</span>.Error, <span class="keyword">new</span> <span class="type">List</span>&lt;<span class="type">State</span>&gt; { <span class="type">State</span>.Idle, <span class="type">State</span>.Loading } }
        };
    }
    
    <span class="keyword">public</span> <span class="type">State</span> CurrentState =&gt; _currentState;
    
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="method">TransitionTo</span>(<span class="type">State</span> newState)
    {
        <span class="keyword">if</span> (!_validTransitions[_currentState].<span class="method">Contains</span>(newState))
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">InvalidOperationException</span>(
                $<span class="string">"Cannot transition from {_currentState} to {newState}"</span>);
        
        _currentState = newState;
        <span class="method">Notify</span>();
    }
    
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="method">StartLoading</span>() =&gt; <span class="method">TransitionTo</span>(<span class="type">State</span>.Loading);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="method">MarkSuccess</span>() =&gt; <span class="method">TransitionTo</span>(<span class="type">State</span>.Success);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="method">MarkError</span>() =&gt; <span class="method">TransitionTo</span>(<span class="type">State</span>.Error);
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="method">Reset</span>() =&gt; <span class="method">TransitionTo</span>(<span class="type">State</span>.Idle);
}

<span class="comment">// Usage</span>
<span class="keyword">var</span> stateMachine = <span class="keyword">new</span> <span class="type">StateMachineSignal</span>();
<span class="keyword">var</span> logger = <span class="keyword">new</span> <span class="type">Signal</span>();

stateMachine.<span class="method">Subscribe</span>(logger);
stateMachine.<span class="method">StartLoading</span>(); <span class="comment">// Notifies logger</span>
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Best Practices</h2>
        <ul class="best-practices">
            <li>
                <strong>Dispose subscriptions</strong> - Always dispose subscriptions when they're no longer needed 
                to prevent memory leaks.
            </li>
            <li>
                <strong>Extend for specific needs</strong> - Create custom signal types by extending <code>Signal</code> 
                when you need specialized behavior.
            </li>
            <li>
                <strong>Avoid excessive updates</strong> - Batch updates when possible to reduce the number of 
                notifications.
            </li>
            <li>
                <strong>Override Notify carefully</strong> - When overriding <code>Notify()</code>, always call 
                <code>base.Notify()</code> to ensure subscribers are notified.
            </li>
        </ul>
    </section>

    <section class="concept-section">
        <h2>When to Use Basic Signals</h2>
        
        <p>Use the basic <code>Signal</code> class when you need:</p>
        <ul class="best-practices">
            <li>A simple notification mechanism without data</li>
            <li>To create custom reactive types with specialized behavior</li>
            <li>Fine-grained control over when notifications occur</li>
            <li>To build the foundation for more complex reactive patterns</li>
        </ul>
        
        <p>For simple value storage with automatic change detection, consider using <code>TypedSignal&lt;T&gt;</code> instead.</p>
    </section>

    <section class="concept-section">
        <h2>Next Steps</h2>
        <p>
            Now that you understand basic signals, explore:
        </p>
        <div class="next-steps">
            <a href="/concepts/typed-signals" class="next-link">
                <span class="next-icon">📦</span>
                <span class="next-text">Typed Signals</span>
            </a>
            <a href="/concepts/computed-signals" class="next-link">
                <span class="next-icon">🔄</span>
                <span class="next-text">Computed Signals</span>
            </a>
            <a href="/concepts/async-signals" class="next-link">
                <span class="next-icon">⚡</span>
                <span class="next-text">Async Signals</span>
            </a>
        </div>
    </section>
</div>

<style>
    .content-page {
        padding: 2rem 1rem;
        background-color: #000;
        min-height: 100vh;
    }
    
    .concept-page {
        max-width: 900px;
        margin: 0 auto;
        color: #e0e0e0;
    }

    .concept-hero {
        text-align: center;
        padding: 3rem 0;
        margin-bottom: 3rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .concept-title {
        font-size: 3rem;
        font-weight: 800;
        margin-bottom: 1rem;
        background: linear-gradient(135deg, #fff 0%, #999 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .concept-subtitle {
        font-size: 1.25rem;
        color: #999;
    }

    .concept-section {
        margin-bottom: 3rem;
    }

    .concept-section h2 {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #fff;
    }

    .concept-section h3 {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 1.5rem 0 0.75rem;
        color: #fff;
    }

    .concept-section p {
        line-height: 1.7;
        margin-bottom: 1rem;
        color: #ccc;
    }

    .best-practices {
        list-style: none;
        padding: 0;
    }

    .best-practices li {
        padding: 0.75rem 0;
        padding-left: 2rem;
        position: relative;
        color: #ccc;
    }

    .best-practices li:before {
        content: "✓";
        position: absolute;
        left: 0;
        color: #4CAF50;
        font-weight: bold;
    }

    .best-practices strong {
        color: #fff;
    }

    .next-steps {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .next-link {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        padding: 1.5rem;
        background: rgba(255, 255, 255, 0.02);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 0.5rem;
        text-decoration: none;
        color: #fff;
        transition: all 0.2s;
    }

    .next-link:hover {
        background: rgba(255, 255, 255, 0.05);
        border-color: rgba(255, 255, 255, 0.2);
        transform: translateY(-2px);
    }

    .next-icon {
        font-size: 2rem;
    }

    .next-text {
        font-weight: 500;
    }
</style>

