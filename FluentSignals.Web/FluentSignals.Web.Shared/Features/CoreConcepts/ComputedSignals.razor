@page "/concepts/computed-signals"
@namespace FluentSignals.Web.Shared.Features.CoreConcepts
@using FluentSignals.Web.Shared.Common.Components

<PageTitle>Computed Signals - FluentSignals</PageTitle>

<div class="concept-page">
    <div class="concept-hero">
        <h1 class="concept-title">Computed Signals</h1>
        <p class="concept-subtitle">Automatically derive values from other signals</p>
    </div>

    <section class="concept-section">
        <h2>What are Computed Signals?</h2>
        <p>
            Computed signals are derived values that automatically update when their dependencies change. 
            They're perfect for calculations, transformations, and aggregations that depend on other reactive values.
            Think of them as Excel formulas that automatically recalculate when their inputs change.
        </p>
    </section>

    <section class="concept-section">
        <h2>Creating Computed Values</h2>
        <p>While FluentSignals doesn't have a built-in ComputedSignal class, you can easily create computed values by subscribing to source signals:</p>
        
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="comment">// Basic computed values pattern</span>
<span class="keyword">var</span> firstName = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">string</span>&gt;(<span class="string">"John"</span>);
<span class="keyword">var</span> lastName = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">string</span>&gt;(<span class="string">"Doe"</span>);

<span class="comment">// Create a computed value</span>
<span class="keyword">var</span> fullName = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">string</span>&gt;($<span class="string">"{firstName.Value} {lastName.Value}"</span>);

<span class="comment">// Update fullName when dependencies change</span>
firstName.<span class="method">Subscribe</span>(_ =&gt; 
    fullName.Value = $<span class="string">"{firstName.Value} {lastName.Value}"</span>);
lastName.<span class="method">Subscribe</span>(_ =&gt; 
    fullName.Value = $<span class="string">"{firstName.Value} {lastName.Value}"</span>);

<span class="comment">// Now updates are automatic</span>
firstName.Value = <span class="string">"Jane"</span>;
<span class="comment">// fullName.Value is now "Jane Doe"</span>
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Multiple Dependencies</h2>
        <p>Computed signals can depend on multiple signals and automatically track all dependencies:</p>
        
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="keyword">var</span> quantity = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">5</span>);
<span class="keyword">var</span> pricePerItem = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">10.99m</span>);
<span class="keyword">var</span> taxRate = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">0.08m</span>);

<span class="comment">// Create computed values</span>
<span class="keyword">var</span> subtotal = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(quantity.Value * pricePerItem.Value);
<span class="keyword">var</span> tax = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(subtotal.Value * taxRate.Value);
<span class="keyword">var</span> total = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(subtotal.Value + tax.Value);

<span class="comment">// Helper to update all computed values</span>
<span class="type">Action</span> updateComputedValues = () =&gt; {
    subtotal.Value = quantity.Value * pricePerItem.Value;
    tax.Value = subtotal.Value * taxRate.Value;
    total.Value = subtotal.Value + tax.Value;
};

<span class="comment">// Subscribe to changes</span>
quantity.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateComputedValues</span>());
pricePerItem.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateComputedValues</span>());
taxRate.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateComputedValues</span>());

<span class="comment">// All values update when dependencies change</span>
quantity.Value = <span class="number">10</span>;
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Computed Signals with Collections</h2>
        <p>Perform aggregations and transformations on collections:</p>
        
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="keyword">var</span> items = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">List</span>&lt;<span class="type">OrderItem</span>&gt;&gt;(<span class="keyword">new</span> <span class="type">List</span>&lt;<span class="type">OrderItem</span>&gt;());

<span class="comment">// Create computed aggregations</span>
<span class="keyword">var</span> totalItems = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">int</span>&gt;(<span class="number">0</span>);
<span class="keyword">var</span> totalPrice = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">0m</span>);
<span class="keyword">var</span> completedItems = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">List</span>&lt;<span class="type">OrderItem</span>&gt;&gt;(<span class="keyword">new</span> <span class="type">List</span>&lt;<span class="type">OrderItem</span>&gt;());

<span class="comment">// Update function for all computed values</span>
<span class="type">Action</span> updateAggregations = () =&gt; {
    totalItems.Value = items.Value.<span class="method">Sum</span>(item =&gt; item.Quantity);
    totalPrice.Value = items.Value.<span class="method">Sum</span>(item =&gt; item.Price * item.Quantity);
    completedItems.Value = items.Value.<span class="method">Where</span>(item =&gt; item.IsCompleted).<span class="method">ToList</span>();
};

<span class="comment">// Subscribe to changes</span>
items.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateAggregations</span>());

<span class="comment">// Complex aggregation</span>
<span class="keyword">var</span> orderSummary = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">OrderSummary</span>&gt;(<span class="keyword">new</span> <span class="type">OrderSummary</span>());

items.<span class="method">Subscribe</span>(_ =&gt; {
    orderSummary.Value = <span class="keyword">new</span> <span class="type">OrderSummary</span>
    {
        TotalItems = items.Value.Count,
        TotalQuantity = items.Value.<span class="method">Sum</span>(i =&gt; i.Quantity),
        TotalPrice = items.Value.<span class="method">Sum</span>(i =&gt; i.Price * i.Quantity),
        AveragePrice = items.Value.<span class="method">Any</span>() ? items.Value.<span class="method">Average</span>(i =&gt; i.Price) : <span class="number">0</span>
    };
});
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Complete Example: Shopping Cart Calculator</h2>
        <CodeBlock Title="Complete Example: Shopping Cart Calculator" Language="CodeBlock.CodeLanguage.CSharp">
<span class="comment">// Source signals for shopping cart</span>
<span class="keyword">var</span> quantity = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>);
<span class="keyword">var</span> pricePerItem = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">19.99m</span>);
<span class="keyword">var</span> discountPercent = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">10m</span>);
<span class="keyword">var</span> taxRate = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">8.5m</span>);

<span class="comment">// Computed values that update automatically</span>
<span class="keyword">var</span> subtotal = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(quantity.Value * pricePerItem.Value);
<span class="keyword">var</span> discountAmount = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">0m</span>);
<span class="keyword">var</span> afterDiscount = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">0m</span>);
<span class="keyword">var</span> taxAmount = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">0m</span>);
<span class="keyword">var</span> total = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">0m</span>);

<span class="comment">// Update function for all computed values</span>
<span class="type">Action</span> updateComputedValues = () =&gt; {
    subtotal.Value = quantity.Value * pricePerItem.Value;
    discountAmount.Value = subtotal.Value * (discountPercent.Value / <span class="number">100</span>);
    afterDiscount.Value = subtotal.Value - discountAmount.Value;
    taxAmount.Value = afterDiscount.Value * (taxRate.Value / <span class="number">100</span>);
    total.Value = afterDiscount.Value + taxAmount.Value;
    
    <span class="type">Console</span>.<span class="method">WriteLine</span>($<span class="string">"Total: ${total.Value:F2}"</span>);
};

<span class="comment">// Subscribe to changes in source signals</span>
quantity.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateComputedValues</span>());
pricePerItem.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateComputedValues</span>());
discountPercent.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateComputedValues</span>());
taxRate.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateComputedValues</span>());

<span class="comment">// Initial calculation</span>
<span class="method">updateComputedValues</span>();

<span class="comment">// Example updates</span>
quantity.Value = <span class="number">3</span>;          <span class="comment">// Updates all computed values</span>
discountPercent.Value = <span class="number">20</span>;  <span class="comment">// Updates discount, afterDiscount, tax, and total</span>
pricePerItem.Value = <span class="number">24.99m</span>; <span class="comment">// Updates all computed values</span>
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Conditional Computations</h2>
        <p>Computed signals can include conditional logic:</p>
        
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="keyword">var</span> isLoggedIn = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">bool</span>&gt;(<span class="keyword">false</span>);
<span class="keyword">var</span> userName = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">string</span>&gt;(<span class="string">""</span>);
<span class="keyword">var</span> guestName = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">string</span>&gt;(<span class="string">"Guest"</span>);

<span class="comment">// Computed display name</span>
<span class="keyword">var</span> displayName = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">string</span>&gt;(
    isLoggedIn.Value ? userName.Value : guestName.Value
);

<span class="comment">// Update display name when dependencies change</span>
<span class="type">Action</span> updateDisplayName = () =&gt; 
    displayName.Value = isLoggedIn.Value ? userName.Value : guestName.Value;

isLoggedIn.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateDisplayName</span>());
userName.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateDisplayName</span>());
guestName.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateDisplayName</span>());

<span class="comment">// Computed welcome message</span>
<span class="keyword">var</span> welcomeMessage = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">string</span>&gt;(<span class="string">"Please log in to continue"</span>);

<span class="type">Action</span> updateWelcomeMessage = () =&gt; {
    <span class="keyword">if</span> (!isLoggedIn.Value)
        welcomeMessage.Value = <span class="string">"Please log in to continue"</span>;
    <span class="keyword">else</span>
        welcomeMessage.Value = <span class="keyword">string</span>.<span class="method">IsNullOrEmpty</span>(userName.Value) 
            ? <span class="string">"Welcome back!"</span> 
            : $<span class="string">"Welcome back, {userName.Value}!"</span>;
};

isLoggedIn.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateWelcomeMessage</span>());
userName.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateWelcomeMessage</span>());
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Performance Optimization</h2>
        <p>When creating computed values, you can optimize by only updating when needed:</p>
        
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="keyword">var</span> source = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>);
<span class="keyword">var</span> expensiveResult = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">int</span>&gt;(<span class="number">0</span>);
<span class="keyword">var</span> computeCount = <span class="number">0</span>;

<span class="comment">// Track computation count</span>
<span class="type">Action</span> computeExpensiveValue = () =&gt; {
    <span class="type">Console</span>.<span class="method">WriteLine</span>(<span class="string">"Computing..."</span>);
    computeCount++;
    
    <span class="comment">// Simulate expensive operation</span>
    <span class="type">Thread</span>.<span class="method">Sleep</span>(<span class="number">100</span>);
    
    expensiveResult.Value = source.Value * <span class="method">ComplexCalculation</span>();
};

<span class="comment">// Only compute when source changes</span>
source.<span class="method">Subscribe</span>(_ =&gt; <span class="method">computeExpensiveValue</span>());

<span class="comment">// Initial computation</span>
<span class="method">computeExpensiveValue</span>();

<span class="comment">// Access the value multiple times - no recomputation</span>
<span class="keyword">var</span> result1 = expensiveResult.Value; <span class="comment">// Already computed</span>
<span class="keyword">var</span> result2 = expensiveResult.Value; <span class="comment">// Still the same value</span>

<span class="comment">// Change source - triggers recomputation</span>
source.Value = <span class="number">42</span>; <span class="comment">// This triggers the computation</span>
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Best Practices</h2>
        <ul class="best-practices">
            <li>
                <strong>Keep computations pure</strong> - Avoid side effects in computation functions. They should 
                only calculate and return values.
            </li>
            <li>
                <strong>Avoid circular dependencies</strong> - Don't create computed signals that depend on each 
                other in a circular manner.
            </li>
            <li>
                <strong>Use for derived state</strong> - If a value can be calculated from other values, use a 
                computed signal instead of managing it separately.
            </li>
            <li>
                <strong>Consider performance</strong> - For expensive computations, consider whether you need 
                real-time updates or if manual calculation would be better.
            </li>
        </ul>
    </section>

    <section class="concept-section">
        <h2>Advanced Patterns</h2>
        
        <h3>Chained Computed Values</h3>
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="comment">// Build complex calculations step by step</span>
<span class="keyword">var</span> basePrice = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="number">100</span>);
<span class="keyword">var</span> quantity = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>);

<span class="comment">// Create chained computed values</span>
<span class="keyword">var</span> subtotal = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(basePrice.Value * quantity.Value);
<span class="keyword">var</span> withShipping = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(subtotal.Value + (subtotal.Value &gt; <span class="number">50</span> ? <span class="number">0</span> : <span class="number">10</span>));
<span class="keyword">var</span> withTax = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(withShipping.Value * <span class="number">1.08m</span>);
<span class="keyword">var</span> finalPrice = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">decimal</span>&gt;(<span class="type">Math</span>.<span class="method">Round</span>(withTax.Value, <span class="number">2</span>));

<span class="comment">// Update chain when base values change</span>
<span class="type">Action</span> updateChain = () =&gt; {
    subtotal.Value = basePrice.Value * quantity.Value;
    withShipping.Value = subtotal.Value + (subtotal.Value &gt; <span class="number">50</span> ? <span class="number">0</span> : <span class="number">10</span>);
    withTax.Value = withShipping.Value * <span class="number">1.08m</span>;
    finalPrice.Value = <span class="type">Math</span>.<span class="method">Round</span>(withTax.Value, <span class="number">2</span>);
};

basePrice.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateChain</span>());
quantity.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateChain</span>());
        </CodeBlock>

        <h3>Dynamic Dependencies</h3>
        <CodeBlock Language="CodeBlock.CodeLanguage.CSharp">
<span class="comment">// Dependencies can change based on conditions</span>
<span class="keyword">var</span> useMetric = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">bool</span>&gt;(<span class="keyword">true</span>);
<span class="keyword">var</span> celsius = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">double</span>&gt;(<span class="number">20</span>);
<span class="keyword">var</span> fahrenheit = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">double</span>&gt;(<span class="number">68</span>);

<span class="comment">// Temperature display with dynamic dependencies</span>
<span class="keyword">var</span> temperature = <span class="keyword">new</span> <span class="type">TypedSignal</span>&lt;<span class="keyword">string</span>&gt;(
    useMetric.Value ? $<span class="string">"{celsius.Value}°C"</span> : $<span class="string">"{fahrenheit.Value}°F"</span>
);

<span class="comment">// Update based on all possible dependencies</span>
<span class="type">Action</span> updateTemperature = () =&gt; 
    temperature.Value = useMetric.Value 
        ? $<span class="string">"{celsius.Value}°C"</span> 
        : $<span class="string">"{fahrenheit.Value}°F"</span>;

useMetric.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateTemperature</span>());
celsius.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateTemperature</span>());
fahrenheit.<span class="method">Subscribe</span>(_ =&gt; <span class="method">updateTemperature</span>());
        </CodeBlock>
    </section>

    <section class="concept-section">
        <h2>Next Steps</h2>
        <p>
            Explore async operations with signals:
        </p>
        <div class="next-steps">
            <a href="/concepts/async-signals" class="next-link">
                <span class="next-icon">⚡</span>
                <span class="next-text">Async Signals</span>
            </a>
        </div>
    </section>
</div>

<style>
    .concept-page {
        max-width: 900px;
        margin: 0 auto;
        padding: 2rem 1rem;
        color: #e0e0e0;
    }

    .concept-hero {
        text-align: center;
        padding: 3rem 0;
        margin-bottom: 3rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .concept-title {
        font-size: 3rem;
        font-weight: 800;
        margin-bottom: 1rem;
        background: linear-gradient(135deg, #fff 0%, #999 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .concept-subtitle {
        font-size: 1.25rem;
        color: #999;
    }

    .concept-section {
        margin-bottom: 3rem;
    }

    .concept-section h2 {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: #fff;
    }

    .concept-section h3 {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 1.5rem 0 0.75rem;
        color: #fff;
    }

    .concept-section p {
        line-height: 1.7;
        margin-bottom: 1rem;
        color: #ccc;
    }

    .best-practices {
        list-style: none;
        padding: 0;
    }

    .best-practices li {
        padding: 0.75rem 0;
        padding-left: 2rem;
        position: relative;
        color: #ccc;
    }

    .best-practices li:before {
        content: "✓";
        position: absolute;
        left: 0;
        color: #4CAF50;
        font-weight: bold;
    }

    .best-practices strong {
        color: #fff;
    }

    .next-steps {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .next-link {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        padding: 1.5rem;
        background: rgba(255, 255, 255, 0.02);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 0.5rem;
        text-decoration: none;
        color: #fff;
        transition: all 0.2s;
    }

    .next-link:hover {
        background: rgba(255, 255, 255, 0.05);
        border-color: rgba(255, 255, 255, 0.2);
        transform: translateY(-2px);
    }

    .next-icon {
        font-size: 2rem;
    }

    .next-text {
        font-weight: 500;
    }
</style>

