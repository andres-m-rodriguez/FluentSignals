

<div id="loading-overlay" class="@(_isLoading ? "active" : "")">
    <div class="signal-animation">
        <!-- Central node -->
        <div class="signal-node central">
            <div class="node-core"></div>
            <div class="pulse-ring"></div>
            <div class="pulse-ring delay-1"></div>
            <div class="pulse-ring delay-2"></div>
        </div>
        
        <!-- Orbiting nodes -->
        <div class="orbit-container">
            <div class="signal-node orbit orbit-1">
                <div class="node-core"></div>
                <svg class="connection-line" viewBox="0 0 200 200">
                    <line x1="100" y1="100" x2="100" y2="20" />
                </svg>
            </div>
            <div class="signal-node orbit orbit-2">
                <div class="node-core"></div>
                <svg class="connection-line" viewBox="0 0 200 200">
                    <line x1="100" y1="100" x2="100" y2="20" />
                </svg>
            </div>
            <div class="signal-node orbit orbit-3">
                <div class="node-core"></div>
                <svg class="connection-line" viewBox="0 0 200 200">
                    <line x1="100" y1="100" x2="100" y2="20" />
                </svg>
            </div>
            <div class="signal-node orbit orbit-4">
                <div class="node-core"></div>
                <svg class="connection-line" viewBox="0 0 200 200">
                    <line x1="100" y1="100" x2="100" y2="20" />
                </svg>
            </div>
        </div>
        
        <!-- Signal particles -->
        <div class="signal-particles">
            @for (int i = 0; i < 12; i++)
            {
                <div class="particle particle-@i"></div>
            }
        </div>
        
        <div class="loading-text">
            <h2>FluentSignals</h2>
            <p>Initializing reactive state...</p>
        </div>
    </div>
</div>

@code {
    private bool _isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Keep the loading animation for 2 seconds
            await Task.Delay(2000);
            _isLoading = false;
            StateHasChanged();
        }
    }
}

<svg width="0" height="0">
    <defs>
        <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stop-color="#667eea" />
            <stop offset="100%" stop-color="#764ba2" />
        </linearGradient>
    </defs>
</svg>


