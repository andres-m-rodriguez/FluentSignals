@namespace FluentSignals.WebAssembly.Components.Pages.Demos.AsyncSignalDemo.Components
@inherits SignalComponentBase
@using FluentSignals.Implementations.Core
@using FluentSignals.Blazor.Extensions
@using FluentSignals.Blazor.Components
@using FluentSignals.WebAssembly.Components

<div class="demo-content">
            <div class="chain-display">
                <div class="chain-step @(step1Signal.IsLoading.Value ? "loading" : step1Signal.Value != null ? "complete" : "")">
                    <span class="step-number">1</span>
                    <span class="step-name">Fetch User</span>
                    @if (step1Signal.IsLoading.Value)
                    {
                        <div class="spinner-tiny"></div>
                    }
                    else if (step1Signal.Value != null)
                    {
                        <span class="checkmark">✓</span>
                    }
                </div>
                
                <div class="chain-arrow">→</div>
                
                <div class="chain-step @(step2Signal.IsLoading.Value ? "loading" : step2Signal.Value != null ? "complete" : "")">
                    <span class="step-number">2</span>
                    <span class="step-name">Fetch Posts</span>
                    @if (step2Signal.IsLoading.Value)
                    {
                        <div class="spinner-tiny"></div>
                    }
                    else if (step2Signal.Value != null)
                    {
                        <span class="checkmark">✓</span>
                    }
                </div>
                
                <div class="chain-arrow">→</div>
                
                <div class="chain-step @(step3Signal.IsLoading.Value ? "loading" : step3Signal.Value != null ? "complete" : "")">
                    <span class="step-number">3</span>
                    <span class="step-name">Process Data</span>
                    @if (step3Signal.IsLoading.Value)
                    {
                        <div class="spinner-tiny"></div>
                    }
                    else if (step3Signal.Value != null)
                    {
                        <span class="checkmark">✓</span>
                    }
                </div>
            </div>
            
            <div class="chain-result">
                @if (step3Signal.Value != null)
                {
                    <div class="result-box">
                        <h4>Final Result</h4>
                        <p>@step3Signal.Value</p>
                    </div>
                }
            </div>
            
            <button class="btn btn-primary" @onclick="RunChainedOperations" 
                    disabled="@(step1Signal.IsLoading.Value || step2Signal.IsLoading.Value || step3Signal.IsLoading.Value)">
                Run Chained Operations
            </button>
            <CodeBlock Code="@chainedOperationsCode" />
</div>

@code {
    // Chained Operations Demo
    private AsyncTypedSignal<string?> step1Signal = new(null);
    private AsyncTypedSignal<string?> step2Signal = new(null);
    private AsyncTypedSignal<string?> step3Signal = new(null);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // Subscribe to all signals for UI updates
        // AsyncTypedSignal now automatically handles subscribing to its internal IsLoading and Error signals
        SubscribeForUpdate(step1Signal);
        SubscribeForUpdate(step2Signal);
        SubscribeForUpdate(step3Signal);
    }

    // Chained Operations
    private async Task RunChainedOperations()
    {
        // Reset all signals
        step1Signal.Value = null;
        step2Signal.Value = null;
        step3Signal.Value = null;

        // Step 1: Fetch User
        await step1Signal.LoadAsync(async () =>
        {
            await Task.Delay(1000);
            return "User: John Doe";
        });

        if (step1Signal.Error.Value == null)
        {
            // Step 2: Fetch Posts
            await step2Signal.LoadAsync(async () =>
            {
                await Task.Delay(1500);
                return "Posts: 5 posts found";
            });

            if (step2Signal.Error.Value == null)
            {
                // Step 3: Process Data
                await step3Signal.LoadAsync(async () =>
                {
                    await Task.Delay(800);
                    return $"Processed: {step1Signal.Value} with {step2Signal.Value}";
                });
            }
        }
    }

    // Code examples
    private string chainedOperationsCode = @"// Chain multiple async operations
var userSignal = new AsyncTypedSignal<User>(null);
var postsSignal = new AsyncTypedSignal<List<Post>>(null);
var resultSignal = new AsyncTypedSignal<ProcessedData>(null);

// Step 1: Fetch user
await userSignal.LoadAsync(async () =>
{
    return await userService.GetUserAsync(userId);
});

// Step 2: Fetch posts if user loaded successfully
if (userSignal.Error.Value == null && userSignal.Value != null)
{
    await postsSignal.LoadAsync(async () =>
    {
        return await postService.GetUserPostsAsync(
            userSignal.Value.Id);
    });
}

// Step 3: Process combined data
if (postsSignal.Error.Value == null && postsSignal.Value != null)
{
    await resultSignal.LoadAsync(async () =>
    {
        return await ProcessUserData(
            userSignal.Value, 
            postsSignal.Value);
    });
}";
}

<style>
    .chain-display {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        padding: 2rem;
        background: #f8fafc;
        border-radius: 12px;
    }

    .chain-step {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem;
        background: white;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        transition: all 0.3s;
    }

    .chain-step.loading {
        border-color: #4f46e5;
        background: #eef2ff;
    }

    .chain-step.complete {
        border-color: #16a34a;
        background: #f0fdf4;
    }

    .step-number {
        width: 30px;
        height: 30px;
        background: #4f46e5;
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
    }

    .step-name {
        font-weight: 600;
    }

    .checkmark {
        color: #16a34a;
        font-size: 1.5rem;
    }

    .chain-arrow {
        font-size: 2rem;
        color: #9ca3af;
    }

    .chain-result {
        margin-top: 1.5rem;
    }

    .result-box {
        background: #f0f9ff;
        border: 2px solid #0ea5e9;
        border-radius: 8px;
        padding: 1.5rem;
        text-align: center;
    }

    .spinner-tiny {
        width: 12px;
        height: 12px;
        border: 2px solid #e5e7eb;
        border-top-color: #4f46e5;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        display: inline-block;
    }

    @@keyframes spin {
        to { transform: rotate(360deg); }
    }

    .btn {
        display: inline-block;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
        text-decoration: none;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background: #4f46e5;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: #4338ca;
        transform: translateY(-1px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .demo-content {
        padding: 2rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
</style>