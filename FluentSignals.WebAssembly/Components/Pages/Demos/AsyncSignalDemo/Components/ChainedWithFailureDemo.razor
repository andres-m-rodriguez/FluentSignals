@namespace FluentSignals.WebAssembly.Components.Pages.Demos.AsyncSignalDemo.Components
@inherits SignalComponentBase
@using FluentSignals.Implementations.Core
@using FluentSignals.Blazor.Extensions
@using FluentSignals.Blazor.Components
@using FluentSignals.WebAssembly.Components

<div class="demo-content">
            <div class="failure-config">
                <h4>Configure Failure Rates</h4>
                <div class="failure-sliders">
                    <label>
                        Step 1 Failure Rate: @step1FailureRate%
                        <input type="range" min="0" max="100" @bind="step1FailureRate" @bind:event="oninput" />
                    </label>
                    <label>
                        Step 2 Failure Rate: @step2FailureRate%
                        <input type="range" min="0" max="100" @bind="step2FailureRate" @bind:event="oninput" />
                    </label>
                    <label>
                        Step 3 Failure Rate: @step3FailureRate%
                        <input type="range" min="0" max="100" @bind="step3FailureRate" @bind:event="oninput" />
                    </label>
                </div>
            </div>

            <div class="chain-display">
                <div class="chain-step @GetStepClass(failureStep1Signal)">
                    <span class="step-number">1</span>
                    <span class="step-name">Authenticate User</span>
                    @if (failureStep1Signal.IsLoading.Value)
                    {
                        <div class="spinner-tiny"></div>
                    }
                    else if (failureStep1Signal.Error.Value != null)
                    {
                        <span class="error-mark">✗</span>
                    }
                    else if (failureStep1Signal.Value != null)
                    {
                        <span class="checkmark">✓</span>
                    }
                </div>
                
                <div class="chain-arrow @(failureStep1Signal.Error.Value != null ? "error" : "")">→</div>
                
                <div class="chain-step @GetStepClass(failureStep2Signal)">
                    <span class="step-number">2</span>
                    <span class="step-name">Load Permissions</span>
                    @if (failureStep2Signal.IsLoading.Value)
                    {
                        <div class="spinner-tiny"></div>
                    }
                    else if (failureStep2Signal.Error.Value != null)
                    {
                        <span class="error-mark">✗</span>
                    }
                    else if (failureStep2Signal.Value != null)
                    {
                        <span class="checkmark">✓</span>
                    }
                </div>
                
                <div class="chain-arrow @(failureStep2Signal.Error.Value != null ? "error" : "")">→</div>
                
                <div class="chain-step @GetStepClass(failureStep3Signal)">
                    <span class="step-number">3</span>
                    <span class="step-name">Initialize App</span>
                    @if (failureStep3Signal.IsLoading.Value)
                    {
                        <div class="spinner-tiny"></div>
                    }
                    else if (failureStep3Signal.Error.Value != null)
                    {
                        <span class="error-mark">✗</span>
                    }
                    else if (failureStep3Signal.Value != null)
                    {
                        <span class="checkmark">✓</span>
                    }
                </div>
            </div>

            <div class="chain-result">
                @if (failureStep3Signal.Value != null)
                {
                    <div class="result-box success">
                        <h4>✅ Success!</h4>
                        <p>@failureStep3Signal.Value</p>
                    </div>
                }
                else if (failureStep1Signal.Error.Value != null || failureStep2Signal.Error.Value != null || failureStep3Signal.Error.Value != null)
                {
                    <div class="result-box error">
                        <h4>❌ Failed</h4>
                        @if (failureStep1Signal.Error.Value != null)
                        {
                            <p>Step 1: @failureStep1Signal.Error.Value.Message</p>
                        }
                        @if (failureStep2Signal.Error.Value != null)
                        {
                            <p>Step 2: @failureStep2Signal.Error.Value.Message</p>
                        }
                        @if (failureStep3Signal.Error.Value != null)
                        {
                            <p>Step 3: @failureStep3Signal.Error.Value.Message</p>
                        }
                    </div>
                }
            </div>

            <div class="chain-stats">
                <h4>Statistics</h4>
                <div class="stats-grid">
                    <div class="stat">
                        <span class="stat-label">Total Runs:</span>
                        <span class="stat-value">@totalRuns</span>
                    </div>
                    <div class="stat">
                        <span class="stat-label">Successful:</span>
                        <span class="stat-value success">@successfulRuns</span>
                    </div>
                    <div class="stat">
                        <span class="stat-label">Failed:</span>
                        <span class="stat-value error">@(totalRuns - successfulRuns)</span>
                    </div>
                    <div class="stat">
                        <span class="stat-label">Success Rate:</span>
                        <span class="stat-value">@(totalRuns > 0 ? $"{(successfulRuns * 100.0 / totalRuns):F1}%" : "N/A")</span>
                    </div>
                </div>
            </div>
            
            <button class="btn btn-primary" @onclick="RunChainedWithFailure" 
                    disabled="@(failureStep1Signal.IsLoading.Value || failureStep2Signal.IsLoading.Value || failureStep3Signal.IsLoading.Value)">
                Run Chain
            </button>
            <button class="btn btn-secondary" @onclick="ResetStats">
                Reset Stats
            </button>
            <TabbedCodeBlock CSharpCode="@chainedWithFailureCode" RazorCode="@chainedWithFailureRazorCode" />
</div>

@code {
    // Chained Operations with Failure Demo
    private AsyncTypedSignal<string?> failureStep1Signal = new(null);
    private AsyncTypedSignal<string?> failureStep2Signal = new(null);
    private AsyncTypedSignal<string?> failureStep3Signal = new(null);
    private int step1FailureRate = 20;
    private int step2FailureRate = 30;
    private int step3FailureRate = 10;
    private int totalRuns = 0;
    private int successfulRuns = 0;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // Subscribe to all signals for UI updates
        // AsyncTypedSignal now automatically handles subscribing to its internal IsLoading and Error signals
        SubscribeForUpdate(failureStep1Signal);
        SubscribeForUpdate(failureStep2Signal);
        SubscribeForUpdate(failureStep3Signal);
    }

    private async Task RunChainedWithFailure()
    {
        totalRuns++;
        
        // Reset all signals
        failureStep1Signal.Value = null;
        failureStep1Signal.Error.Value = null;
        failureStep2Signal.Value = null;
        failureStep2Signal.Error.Value = null;
        failureStep3Signal.Value = null;
        failureStep3Signal.Error.Value = null;

        // Step 1: Authenticate User
        await failureStep1Signal.LoadAsync(async () =>
        {
            await Task.Delay(800);
            
            var random = new Random();
            if (random.Next(100) < step1FailureRate)
            {
                throw new Exception("Authentication failed");
            }
            
            return "User authenticated: john.doe@example.com";
        });

        if (failureStep1Signal.Error.Value == null)
        {
            // Step 2: Load Permissions
            await failureStep2Signal.LoadAsync(async () =>
            {
                await Task.Delay(1000);
                
                var random = new Random();
                if (random.Next(100) < step2FailureRate)
                {
                    throw new Exception("Failed to load permissions");
                }
                
                return "Permissions loaded: Admin, User, Editor";
            });

            if (failureStep2Signal.Error.Value == null)
            {
                // Step 3: Initialize App
                await failureStep3Signal.LoadAsync(async () =>
                {
                    await Task.Delay(600);
                    
                    var random = new Random();
                    if (random.Next(100) < step3FailureRate)
                    {
                        throw new Exception("App initialization failed");
                    }
                    
                    return $"App initialized successfully for {failureStep1Signal.Value}";
                });
                
                if (failureStep3Signal.Error.Value == null)
                {
                    successfulRuns++;
                }
            }
        }
    }

    private void ResetStats()
    {
        totalRuns = 0;
        successfulRuns = 0;
        failureStep1Signal.Value = null;
        failureStep1Signal.Error.Value = null;
        failureStep2Signal.Value = null;
        failureStep2Signal.Error.Value = null;
        failureStep3Signal.Value = null;
        failureStep3Signal.Error.Value = null;
    }

    private string GetStepClass(AsyncTypedSignal<string?> signal)
    {
        if (signal.IsLoading.Value) return "loading";
        if (signal.Error.Value != null) return "error";
        if (signal.Value != null) return "complete";
        return "";
    }

    // Code examples
    private string chainedWithFailureCode = @"using FluentSignals.Implementations.Core;

public partial class ChainedFailureDemo
{
    private AsyncTypedSignal<string?> step1Signal = new(null);
    private AsyncTypedSignal<string?> step2Signal = new(null);
    private AsyncTypedSignal<string?> step3Signal = new(null);
    private int step1FailureRate = 20; // 20% chance of failure
    private int step2FailureRate = 30; // 30% chance of failure
    private int step3FailureRate = 10; // 10% chance of failure

    private async Task RunChainedOperations()
    {
        // Reset all signals
        step1Signal.Value = null;
        step2Signal.Value = null;
        step3Signal.Value = null;

        // Step 1: Authenticate (20% failure rate)
        await step1Signal.LoadAsync(async () =>
        {
            await Task.Delay(800);
            
            if (Random.Shared.Next(100) < step1FailureRate)
                throw new Exception(""Authentication failed"");
            
            return ""User authenticated"";
        });

        // Continue only if step 1 succeeded
        if (step1Signal.Error.Value == null)
        {
            // Step 2: Load permissions (30% failure rate)
            await step2Signal.LoadAsync(async () =>
            {
                await Task.Delay(1000);
                
                if (Random.Shared.Next(100) < step2FailureRate)
                    throw new Exception(""Permission loading failed"");
                
                return ""Permissions loaded"";
            });

            // Continue only if step 2 succeeded
            if (step2Signal.Error.Value == null)
            {
                // Step 3: Initialize (10% failure rate)
                await step3Signal.LoadAsync(async () =>
                {
                    await Task.Delay(600);
                    
                    if (Random.Shared.Next(100) < step3FailureRate)
                        throw new Exception(""Initialization failed"");
                    
                    return ""App ready!"";
                });
            }
        }
    }
}";

    private string chainedWithFailureRazorCode = @"<div class=""failure-config"">
    <h4>Configure Failure Rates</h4>
    <label>
        Step 1: @step1FailureRate%
        <input type=""range"" min=""0"" max=""100"" 
               @bind=""step1FailureRate"" @bind:event=""oninput"" />
    </label>
    <!-- Similar for other steps -->
</div>

<div class=""chain-display"">
    <div class=""chain-step @GetStepClass(step1Signal)"">
        <span class=""step-number"">1</span>
        <span class=""step-name"">Authenticate</span>
        @if (step1Signal.IsLoading.Value)
        {
            <div class=""spinner""></div>
        }
        else if (step1Signal.Error.Value != null)
        {
            <span class=""error-mark"">✗</span>
        }
        else if (step1Signal.Value != null)
        {
            <span class=""checkmark"">✓</span>
        }
    </div>
    
    <div class=""chain-arrow"">→</div>
    
    <!-- Similar for other steps -->
</div>

<div class=""chain-stats"">
    <h4>Statistics</h4>
    <div>Total Runs: @totalRuns</div>
    <div>Successful: @successfulRuns</div>
    <div>Success Rate: @((successfulRuns * 100.0 / totalRuns):F1)%</div>
</div>

<button @onclick=""RunChainedOperations"">Run Chain</button>
<button @onclick=""ResetStats"">Reset Stats</button>";
}

<style>
    .failure-config {
        background: #f8fafc;
        padding: 1.5rem;
        border-radius: 12px;
        margin-bottom: 2rem;
    }
    
    .failure-sliders {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-top: 1rem;
    }
    
    .failure-sliders label {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-weight: 500;
    }
    
    .failure-sliders input[type="range"] {
        flex: 1;
    }
    
    .chain-display {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        padding: 2rem;
        background: #f8fafc;
        border-radius: 12px;
    }

    .chain-step {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem;
        background: white;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        transition: all 0.3s;
    }

    .chain-step.loading {
        border-color: #4f46e5;
        background: #eef2ff;
    }

    .chain-step.complete {
        border-color: #16a34a;
        background: #f0fdf4;
    }
    
    .chain-step.error {
        border-color: #dc2626;
        background: #fef2f2;
    }

    .step-number {
        width: 30px;
        height: 30px;
        background: #4f46e5;
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
    }

    .step-name {
        font-weight: 600;
    }

    .checkmark {
        color: #16a34a;
        font-size: 1.5rem;
    }
    
    .error-mark {
        color: #dc2626;
        font-size: 1.5rem;
        font-weight: 700;
    }

    .chain-arrow {
        font-size: 2rem;
        color: #9ca3af;
    }
    
    .chain-arrow.error {
        color: #dc2626;
    }

    .chain-result {
        margin-top: 1.5rem;
    }

    .result-box {
        padding: 1.5rem;
        border-radius: 12px;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .result-box.success {
        background: #f0fdf4;
        border: 2px solid #16a34a;
        color: #14532d;
    }
    
    .result-box.error {
        background: #fef2f2;
        border: 2px solid #dc2626;
        color: #7f1d1d;
    }
    
    .result-box h4 {
        margin: 0 0 1rem 0;
        font-size: 1.25rem;
    }
    
    .result-box p {
        margin: 0.5rem 0;
    }
    
    .chain-stats {
        background: white;
        border: 2px solid #e5e7eb;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 2rem 0;
    }
    
    .chain-stats h4 {
        margin: 0 0 1rem 0;
        color: #1e293b;
    }
    
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 1rem;
    }
    
    .stat {
        text-align: center;
        padding: 1rem;
        background: #f8fafc;
        border-radius: 8px;
    }
    
    .stat-label {
        display: block;
        font-size: 0.875rem;
        color: #64748b;
        margin-bottom: 0.5rem;
    }
    
    .stat-value {
        display: block;
        font-size: 1.5rem;
        font-weight: 700;
        color: #1e293b;
    }
    
    .stat-value.success {
        color: #16a34a;
    }
    
    .stat-value.error {
        color: #dc2626;
    }

    .spinner-tiny {
        width: 12px;
        height: 12px;
        border: 2px solid #e5e7eb;
        border-top-color: #4f46e5;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        display: inline-block;
    }

    @@keyframes spin {
        to { transform: rotate(360deg); }
    }
</style>