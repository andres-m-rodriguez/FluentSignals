@using FluentSignals.Options.HttpResource
@using FluentSignals.Blazor.Components
@using FluentSignals.Blazor.Extensions

@using FluentSignals.WebAssembly.Components
@using FluentSignals.WebAssembly.Models
@inherits SignalComponentBase
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="demo-content">
    <div class="todo-app">
        <div class="todo-header">
            <h3>Todo List</h3>
            <div class="todo-stats">
                @if (todoResource?.IsLoading.Value == true)
                {
                    <span class="loading-text">Updating...</span>
                }
                else if (todos.Any())
                {
                    <span>@todos.Count(t => t.IsCompleted) / @todos.Count completed</span>
                }
            </div>
        </div>
        
        <div class="todo-form">
            <input type="text" @bind="newTodoTitle" @bind:event="oninput" 
                   placeholder="Add a new todo..." class="todo-input" />
            <button class="btn btn-primary" @onclick="AddTodo" 
                    disabled="@(string.IsNullOrWhiteSpace(newTodoTitle) || addingTodo)">
                @if (addingTodo)
                {
                    <span>Adding...</span>
                }
                else
                {
                    <span>Add</span>
                }
            </button>
        </div>
        
        <div class="todo-list">
            @if (!todos.Any())
            {
                <div class="empty-todos">
                    <span>No todos yet. Add one above!</span>
                </div>
            }
            @foreach (var todo in todos)
            {
                <div class="todo-item @(todo.IsCompleted ? "completed" : "")">
                    <label class="todo-checkbox">
                        <input type="checkbox" checked="@todo.IsCompleted" 
                               @onchange="() => ToggleTodo(todo)" />
                        <span class="checkmark"></span>
                    </label>
                    <span class="todo-title">@todo.Title</span>
                    <button class="todo-delete" @onclick="() => DeleteTodo(todo)">
                        Ã—
                    </button>
                </div>
            }
        </div>
    </div>

    <CodeBlock Code="@ProgrammaticHttpResourceDemo.CodeExample" />
</div>

@code {
    private HttpResource? todoResource;
    private List<TodoItem> todos = new();
    private string newTodoTitle = "";
    private bool addingTodo = false;

    public static string CodeExample => @"// Create HttpResource with options
var options = new HttpResourceOptions
{
    BaseUrl = ""https://api.example.com"",
    Timeout = TimeSpan.FromSeconds(30),
    DefaultHeaders = new Dictionary<string, string>
    {
        [""Authorization""] = ""Bearer token""
    }
};

var httpResource = new HttpResource(httpClient, options);

// Subscribe to state changes
httpResource.IsLoading.Subscribe(loading =>
{
    ShowLoadingIndicator = loading;
    StateHasChanged();
});

httpResource.Error.Subscribe(error =>
{
    if (error != null)
    {
        ShowError(error.Message);
    }
});

// Make HTTP requests
// GET
var todos = await httpResource.GetAsync<Todo[]>(""/todos"");

// POST
var newTodo = new Todo { Title = ""New Task"" };
var created = await httpResource.PostAsync<Todo, Todo>(
    ""/todos"", newTodo);

// PUT
var updated = await httpResource.PutAsync<Todo, Todo>(
    $""/todos/{id}"", todo);

// DELETE
await httpResource.DeleteAsync($""/todos/{id}"");

// Access response details
if (todos.StatusCode == HttpStatusCode.OK && todos.Data != null)
{
    ProcessTodos(todos.Data);
}";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        // Initialize todo resource
        InitializeTodoResource();
        await LoadTodos();
    }

    private void InitializeTodoResource()
    {
        var options = new HttpResourceOptions
        {
            BaseUrl = Navigation.BaseUri,
            Timeout = TimeSpan.FromSeconds(30)
        };
        
        todoResource = new HttpResource(Http, options);
        
        // Subscribe to changes
        todoResource.Subscribe(_ => { InvokeAsync(StateHasChanged); });
        todoResource.IsLoading.Subscribe(_ => { InvokeAsync(StateHasChanged); });
        todoResource.Error.Subscribe(_ => { InvokeAsync(StateHasChanged); });
    }

    private async Task LoadTodos()
    {
        var response = await todoResource!.GetAsync<TodoItem[]>("/api/todo");
        if (response.Data != null)
        {
            todos = response.Data.ToList();
        }
    }

    private async Task AddTodo()
    {
        if (string.IsNullOrWhiteSpace(newTodoTitle)) return;
        
        addingTodo = true;
        StateHasChanged();
        
        var newTodo = new TodoItem { Title = newTodoTitle, IsCompleted = false };
        var response = await todoResource!.PostAsync<TodoItem, TodoItem>("/api/todo", newTodo);
        
        if (response.Data != null)
        {
            todos.Add(response.Data);
            newTodoTitle = "";
        }
        
        addingTodo = false;
        StateHasChanged();
    }

    private async Task ToggleTodo(TodoItem todo)
    {
        var response = await todoResource!.PostAsync<object?, TodoItem>($"/api/todo/{todo.Id}/toggle", null);
        if (response.Data != null)
        {
            var index = todos.FindIndex(t => t.Id == todo.Id);
            if (index >= 0)
            {
                todos[index] = response.Data;
            }
        }
    }

    private async Task DeleteTodo(TodoItem todo)
    {
        var response = await todoResource!.DeleteAsync<TodoItem>($"/api/todo/{todo.Id}");
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            todos.Remove(todo);
        }
    }

    public override void Dispose()
    {
        todoResource?.Dispose();
        base.Dispose();
    }
}

<style>
    .todo-app {
        background: #f8fafc;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }

    .todo-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .todo-stats {
        color: #64748b;
        font-size: 0.875rem;
    }

    .loading-text {
        color: #4f46e5;
        font-weight: 600;
    }

    .todo-form {
        display: flex;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
    }

    .todo-input {
        flex: 1;
        padding: 0.75rem;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 1rem;
    }

    .todo-input:focus {
        outline: none;
        border-color: #4f46e5;
    }

    .todo-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .empty-todos {
        text-align: center;
        padding: 2rem;
        color: #64748b;
    }

    .todo-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        background: white;
        border-radius: 8px;
        transition: all 0.2s;
    }

    .todo-item.completed {
        opacity: 0.6;
    }

    .todo-item.completed .todo-title {
        text-decoration: line-through;
        color: #64748b;
    }

    .todo-checkbox {
        position: relative;
        display: inline-block;
        width: 20px;
        height: 20px;
    }

    .todo-checkbox input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .checkmark {
        position: absolute;
        top: 0;
        left: 0;
        height: 20px;
        width: 20px;
        background-color: #e5e7eb;
        border-radius: 4px;
        cursor: pointer;
    }

    .todo-checkbox input:checked ~ .checkmark {
        background-color: #4f46e5;
    }

    .checkmark:after {
        content: "";
        position: absolute;
        display: none;
        left: 7px;
        top: 3px;
        width: 5px;
        height: 10px;
        border: solid white;
        border-width: 0 2px 2px 0;
        transform: rotate(45deg);
    }

    .todo-checkbox input:checked ~ .checkmark:after {
        display: block;
    }

    .todo-title {
        flex: 1;
    }

    .todo-delete {
        background: transparent;
        border: none;
        color: #ef4444;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
        transition: all 0.2s;
    }

    .todo-delete:hover {
        background: #fee2e2;
    }
</style>