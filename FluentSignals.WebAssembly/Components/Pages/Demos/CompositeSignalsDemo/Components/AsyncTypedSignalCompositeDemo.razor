@namespace FluentSignals.WebAssembly.Components.Pages.Demos.CompositeSignalsDemo.Components
@using FluentSignals.Implementations.Core
@using FluentSignals.Contracts
@using FluentSignals.WebAssembly.Components
@using FluentSignals.Blazor.Components
@inherits SignalComponentBase

<div class="demo-content">
            <div class="async-demo">
                <div class="status-indicators">
                    <div class="indicator @(userDataSignal.IsLoading.Value ? "active" : "")">
                        <span class="spinner"></span>
                        Loading: @userDataSignal.IsLoading.Value
                    </div>
                    <div class="indicator error @(userDataSignal.Error.Value != null ? "active" : "")">
                        Error: @(userDataSignal.Error.Value?.Message ?? "None")
                    </div>
                </div>
                
                <div class="data-display">
                    @if (userDataSignal.Value != null)
                    {
                        <div class="user-card">
                            <h4>@userDataSignal.Value.Name</h4>
                            <p>@userDataSignal.Value.Email</p>
                            <p>Role: @userDataSignal.Value.Role</p>
                        </div>
                    }
                    else
                    {
                        <div class="placeholder">No user data loaded</div>
                    }
                </div>
                
                <div class="button-group">
                    <button class="btn btn-primary" @onclick="LoadUserSuccess">Load User (Success)</button>
                    <button class="btn btn-danger" @onclick="LoadUserError">Load User (Error)</button>
                    <button class="btn btn-secondary" @onclick="ClearUser">Clear</button>
                </div>
            </div>

    <TabbedCodeBlock CSharpCode="@asyncTypedSignalCode" RazorCode="@asyncTypedSignalRazorCode" />
</div>

@code {
    // User data example
    public class UserData
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Role { get; set; } = "";
    }

    private AsyncTypedSignal<UserData?> userDataSignal = new(null);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // Subscribe to AsyncTypedSignal - this will automatically subscribe to all internal signals
        // (the signal itself, IsLoading, and Error)
        SubscribeForUpdate(userDataSignal);
    }

    private async Task LoadUserSuccess()
    {
        await userDataSignal.LoadAsync(async () =>
        {
            await Task.Delay(1500); // Simulate API call
            return new UserData 
            { 
                Name = "John Doe", 
                Email = "john@example.com", 
                Role = "Administrator" 
            };
        });
    }

    private async Task LoadUserError()
    {
        await userDataSignal.LoadAsync(async () =>
        {
            await Task.Delay(1000); // Simulate API call
            throw new Exception("Failed to load user data");
        });
    }

    private void ClearUser()
    {
        userDataSignal.Value = null;
        userDataSignal.Error.Value = null;
    }

    // Code examples
    private string asyncTypedSignalCode = @"public class AsyncTypedSignal<T> : TypedSignal<T>, IAsyncSignal<T>, ICompositeSignal
{
    // Internal signals for loading state and errors
    public ISignal<bool> IsLoading { get; } = new TypedSignal<bool>(false);
    public ISignal<Exception?> Error { get; } = new TypedSignal<Exception?>(null);

    public async Task LoadAsync(Func<Task<T>> loader)
    {
        IsLoading.Value = true;
        Error.Value = null;

        try
        {
            var result = await loader();
            Value = result;
        }
        catch (Exception ex)
        {
            Error.Value = ex;
        }
        finally
        {
            IsLoading.Value = false;
        }
    }

    // Implement ICompositeSignal
    public IEnumerable<ISignal> GetInternalSignals()
    {
        yield return IsLoading;
        yield return Error;
        yield return this; // The signal itself for value changes
    }
}";

    private string asyncTypedSignalRazorCode = @"@* Subscribe to all internal signals automatically *@
@code {
    private AsyncTypedSignal<UserData?> userDataSignal = new(null);

    protected override void OnInitialized()
    {
        // One loop to subscribe to all internal signals!
        foreach (var signal in userDataSignal.GetInternalSignals())
        {
            signal.Subscribe(_ => InvokeAsync(StateHasChanged));
        }
    }
}

@* Use all signals in the UI *@
<div class=""status"">
    Loading: @userDataSignal.IsLoading.Value
    Error: @userDataSignal.Error.Value?.Message
    Data: @userDataSignal.Value?.Name
</div>";
}

<style>
    /* Async demo styles */
    .async-demo {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .status-indicators {
        display: flex;
        gap: 1rem;
    }

    .indicator {
        padding: 0.75rem 1.5rem;
        background: #f3f4f6;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s;
    }

    .indicator.active {
        background: #dbeafe;
        color: #1e40af;
    }

    .indicator.error.active {
        background: #fee2e2;
        color: #991b1b;
    }

    .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid #e5e7eb;
        border-top-color: #3b82f6;
        border-radius: 50%;
        animation: spin 0.8s linear infinite;
        display: none;
    }

    .indicator.active .spinner {
        display: block;
    }

    @@keyframes spin {
        to { transform: rotate(360deg); }
    }

    .data-display {
        min-height: 120px;
        background: #f8fafc;
        border-radius: 8px;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .user-card {
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        width: 100%;
    }

    .user-card h4 {
        margin: 0 0 0.5rem 0;
        color: #1e293b;
    }

    .user-card p {
        margin: 0.25rem 0;
        color: #64748b;
    }

    .placeholder {
        color: #94a3b8;
        font-style: italic;
    }

    /* Button styles */
    .button-group {
        display: flex;
        gap: 0.75rem;
        flex-wrap: wrap;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .btn-primary {
        background: #3b82f6;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: #2563eb;
    }

    .btn-secondary {
        background: #6b7280;
        color: white;
    }

    .btn-secondary:hover:not(:disabled) {
        background: #4b5563;
    }

    .btn-danger {
        background: #ef4444;
        color: white;
    }

    .btn-danger:hover:not(:disabled) {
        background: #dc2626;
    }
</style>