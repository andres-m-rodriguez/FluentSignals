@namespace FluentSignals.WebAssembly.Components.Pages.Demos.CompositeSignalsDemo.Components
@using FluentSignals.Implementations.Core
@using FluentSignals.Contracts
@using FluentSignals.WebAssembly.Components
@using FluentSignals.Blazor.Extensions
@using FluentSignals.Blazor.Components
@inherits SignalComponentBase

<div class="demo-content">
            <div class="form-demo">
                <div class="form-status">
                    <div class="status-badge @(formSignal.IsValid.Value ? "valid" : "invalid")">
                        Form @(formSignal.IsValid.Value ? "Valid" : "Invalid")
                    </div>
                    <div class="status-badge @(formSignal.IsDirty.Value ? "dirty" : "clean")">
                        @(formSignal.IsDirty.Value ? "Modified" : "Pristine")
                    </div>
                    <div class="status-badge @(formSignal.IsSubmitting.Value ? "submitting" : "")">
                        @(formSignal.IsSubmitting.Value ? "Submitting..." : "Ready")
                    </div>
                </div>
                
                <div class="form-fields">
                    <div class="field-group">
                        <label>Username:</label>
                        <input type="text" @bind="@formSignal.Fields["username"].Value" @bind:event="oninput" />
                        @if (formSignal.Errors.Value.ContainsKey("username"))
                        {
                            <span class="field-error">@formSignal.Errors.Value["username"]</span>
                        }
                    </div>
                    
                    <div class="field-group">
                        <label>Email:</label>
                        <input type="email" @bind="@formSignal.Fields["email"].Value" @bind:event="oninput" />
                        @if (formSignal.Errors.Value.ContainsKey("email"))
                        {
                            <span class="field-error">@formSignal.Errors.Value["email"]</span>
                        }
                    </div>
                    
                    <div class="field-group">
                        <label>Password:</label>
                        <input type="password" @bind="@formSignal.Fields["password"].Value" @bind:event="oninput" />
                        @if (formSignal.Errors.Value.ContainsKey("password"))
                        {
                            <span class="field-error">@formSignal.Errors.Value["password"]</span>
                        }
                    </div>
                </div>
                
                <div class="form-actions">
                    <button class="btn btn-primary" 
                            @onclick="SubmitForm" 
                            disabled="@(!formSignal.IsValid.Value || formSignal.IsSubmitting.Value)">
                        @(formSignal.IsSubmitting.Value ? "Submitting..." : "Submit")
                    </button>
                    <button class="btn btn-secondary" @onclick="ResetForm">Reset</button>
                </div>
                
                @if (submitMessage != null)
                {
                    <div class="submit-message">@submitMessage</div>
                }
            </div>

    <TabbedCodeBlock CSharpCode="@customCompositeCode" RazorCode="@customCompositeRazorCode" />
</div>

@code {
    // Custom form signal
    private FormSignal formSignal = new();
    private string? submitMessage;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        // Subscribe to all signals for UI updates
        SubscribeToSignals();
    }

    private void SubscribeToSignals()
    {
        // Subscribe to custom FormSignal's internal signals
        // Since FormSignal doesn't implement ISignal itself, we need to subscribe to its internal signals
        SubscribeToSignals(formSignal.GetInternalSignals(), () => { });
    }

    // Form signal methods
    private async Task SubmitForm()
    {
        submitMessage = null;
        await formSignal.SubmitAsync(async () =>
        {
            await Task.Delay(2000); // Simulate API call
            submitMessage = "Form submitted successfully!";
        });
    }

    private void ResetForm()
    {
        formSignal.Reset();
        submitMessage = null;
    }

    // Custom composite signal implementation
    public class FormSignal : ICompositeSignal, IDisposable
    {
        public Dictionary<string, TypedSignal<string>> Fields { get; } = new();
        public TypedSignal<Dictionary<string, string>> Errors { get; } = new(new Dictionary<string, string>());
        public TypedSignal<bool> IsValid { get; } = new(false);
        public TypedSignal<bool> IsDirty { get; } = new(false);
        public TypedSignal<bool> IsSubmitting { get; } = new(false);
        
        private Dictionary<string, string> initialValues = new();

        public FormSignal()
        {
            // Initialize fields
            Fields["username"] = new TypedSignal<string>("");
            Fields["email"] = new TypedSignal<string>("");
            Fields["password"] = new TypedSignal<string>("");
            
            // Store initial values
            foreach (var field in Fields)
            {
                initialValues[field.Key] = field.Value.Value;
            }
            
            // Subscribe to field changes for validation
            foreach (var field in Fields)
            {
                field.Value.Subscribe(_ =>
                {
                    Validate();
                    CheckDirty();
                });
            }
            
            // Initial validation
            Validate();
        }

        private void Validate()
        {
            var errors = new Dictionary<string, string>();
            
            // Username validation
            if (string.IsNullOrWhiteSpace(Fields["username"].Value))
            {
                errors["username"] = "Username is required";
            }
            else if (Fields["username"].Value.Length < 3)
            {
                errors["username"] = "Username must be at least 3 characters";
            }
            
            // Email validation
            if (string.IsNullOrWhiteSpace(Fields["email"].Value))
            {
                errors["email"] = "Email is required";
            }
            else if (!Fields["email"].Value.Contains("@"))
            {
                errors["email"] = "Invalid email format";
            }
            
            // Password validation
            if (string.IsNullOrWhiteSpace(Fields["password"].Value))
            {
                errors["password"] = "Password is required";
            }
            else if (Fields["password"].Value.Length < 6)
            {
                errors["password"] = "Password must be at least 6 characters";
            }
            
            Errors.Value = errors;
            IsValid.Value = errors.Count == 0;
        }

        private void CheckDirty()
        {
            IsDirty.Value = Fields.Any(f => f.Value.Value != initialValues[f.Key]);
        }

        public async Task SubmitAsync(Func<Task> onSubmit)
        {
            if (!IsValid.Value || IsSubmitting.Value) return;
            
            IsSubmitting.Value = true;
            try
            {
                await onSubmit();
                // Update initial values after successful submit
                foreach (var field in Fields)
                {
                    initialValues[field.Key] = field.Value.Value;
                }
                IsDirty.Value = false;
            }
            finally
            {
                IsSubmitting.Value = false;
            }
        }

        public void Reset()
        {
            foreach (var field in Fields)
            {
                field.Value.Value = initialValues[field.Key];
            }
            Validate();
            CheckDirty();
        }

        public IEnumerable<ISignal> GetInternalSignals()
        {
            // Return all field signals
            foreach (var field in Fields.Values)
            {
                yield return field;
            }
            
            // Return all state signals
            yield return Errors;
            yield return IsValid;
            yield return IsDirty;
            yield return IsSubmitting;
        }

        public void Dispose()
        {
            foreach (var field in Fields.Values)
            {
                field.Dispose();
            }
            Errors.Dispose();
            IsValid.Dispose();
            IsDirty.Dispose();
            IsSubmitting.Dispose();
        }
    }

    // Code examples
    private string customCompositeCode = @"public class FormSignal : ICompositeSignal, IDisposable
{
    // Field signals
    public Dictionary<string, TypedSignal<string>> Fields { get; } = new();
    
    // State signals
    public TypedSignal<Dictionary<string, string>> Errors { get; } = new(new());
    public TypedSignal<bool> IsValid { get; } = new(false);
    public TypedSignal<bool> IsDirty { get; } = new(false);
    public TypedSignal<bool> IsSubmitting { get; } = new(false);

    public FormSignal()
    {
        // Initialize fields
        Fields[""username""] = new TypedSignal<string>("""");
        Fields[""email""] = new TypedSignal<string>("""");
        
        // Subscribe to field changes for validation
        foreach (var field in Fields)
        {
            field.Value.Subscribe(_ =>
            {
                Validate();
                CheckDirty();
            });
        }
    }

    // Implement ICompositeSignal
    public IEnumerable<ISignal> GetInternalSignals()
    {
        // Return all field signals
        foreach (var field in Fields.Values)
        {
            yield return field;
        }
        
        // Return all state signals
        yield return Errors;
        yield return IsValid;
        yield return IsDirty;
        yield return IsSubmitting;
    }
    
    private void Validate()
    {
        // Validation logic updates Errors and IsValid signals
    }
    
    public void Dispose()
    {
        // Dispose all internal signals
        foreach (var signal in GetInternalSignals())
        {
            signal.Dispose();
        }
    }
}";

    private string customCompositeRazorCode = @"@code {
    private FormSignal formSignal = new();

    protected override void OnInitialized()
    {
        // Subscribe to ALL form signals with one loop!
        // This includes all fields and all state signals
        foreach (var signal in formSignal.GetInternalSignals())
        {
            signal.Subscribe(_ => InvokeAsync(StateHasChanged));
        }
    }
}

@* Use the form with all its signals *@
<form>
    <input @bind=""formSignal.Fields[""username""].Value"" />
    @if (formSignal.Errors.Value.ContainsKey(""username""))
    {
        <span>@formSignal.Errors.Value[""username""]</span>
    }
    
    <button disabled=""@(!formSignal.IsValid.Value)"">
        @(formSignal.IsSubmitting.Value ? ""Submitting..."" : ""Submit"")
    </button>
</form>";
}

<style>
    .demo-content {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    /* Form demo styles */
    .form-demo {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .form-status {
        display: flex;
        gap: 0.75rem;
    }

    .status-badge {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
        background: #f3f4f6;
        color: #6b7280;
    }

    .status-badge.valid {
        background: #d1fae5;
        color: #065f46;
    }

    .status-badge.invalid {
        background: #fee2e2;
        color: #991b1b;
    }

    .status-badge.dirty {
        background: #fef3c7;
        color: #92400e;
    }

    .status-badge.submitting {
        background: #dbeafe;
        color: #1e40af;
    }

    .form-fields {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .field-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .field-group label {
        font-weight: 500;
        color: #374151;
    }

    .field-group input {
        padding: 0.75rem;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.2s;
    }

    .field-group input:focus {
        outline: none;
        border-color: #3b82f6;
    }

    .field-error {
        color: #ef4444;
        font-size: 0.875rem;
    }

    .form-actions {
        display: flex;
        gap: 0.75rem;
    }

    .submit-message {
        padding: 1rem;
        background: #d1fae5;
        color: #065f46;
        border-radius: 8px;
        text-align: center;
        font-weight: 500;
    }

    /* Button styles */
    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .btn-primary {
        background: #3b82f6;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: #2563eb;
    }

    .btn-secondary {
        background: #6b7280;
        color: white;
    }

    .btn-secondary:hover:not(:disabled) {
        background: #4b5563;
    }
</style>