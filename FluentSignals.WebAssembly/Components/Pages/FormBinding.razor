@page "/form-binding"
@using FluentSignals.Contracts
@using FluentSignals.Implementations.Core
@using FluentSignals.WebAssembly.Components
@using FluentSignals.Blazor.Components
@inherits SignalComponentBase

<PageTitle>Form Binding - FluentSignals</PageTitle>

<div class="demo-page">
    <div class="page-header">
        <h1>Form Binding with Signals</h1>
        <p class="lead">Bind form inputs to reactive signals for automatic UI updates</p>
    </div>

    <DemoSection Title="Two-Way Form Binding"
                 Description="Signals automatically sync with form inputs and update all bound UI elements"
                 CSharpCode="@formBindingCode"
                 RazorCode="@formBindingRazorCode">
        <Demo>
            <div class="form-demo">
                <div class="form-section">
                    <h4>User Profile Form</h4>
                    <div class="form-group">
                        <label>Name:</label>
                        <input type="text" class="form-control" @bind="userName.Value" @bind:event="oninput" />
                    </div>
                    <div class="form-group">
                        <label>Email:</label>
                        <input type="email" class="form-control" @bind="userEmail.Value" @bind:event="oninput" />
                    </div>
                    <div class="form-group">
                        <label>Age:</label>
                        <input type="number" class="form-control" @bind="userAge.Value" @bind:event="oninput" />
                    </div>
                    <div class="form-group">
                        <label>
                            <input type="checkbox" @bind="newsletter.Value" />
                            Subscribe to newsletter
                        </label>
                    </div>
                </div>

                <div class="preview-section">
                    <h4>Live Preview</h4>
                    <div class="preview-card">
                        <div class="preview-item">
                            <strong>Name:</strong> @userName.Value
                        </div>
                        <div class="preview-item">
                            <strong>Email:</strong> @userEmail.Value
                        </div>
                        <div class="preview-item">
                            <strong>Age:</strong> @userAge.Value
                        </div>
                        <div class="preview-item">
                            <strong>Newsletter:</strong> @(newsletter.Value ? "Subscribed" : "Not Subscribed")
                        </div>
                    </div>
                </div>
            </div>
        </Demo>
    </DemoSection>

    <DemoSection Title="Computed Form Values"
                 Description="Use signals to create reactive computed values from form inputs"
                 CSharpCode="@computedFormCode"
                 RazorCode="@computedFormRazorCode">
        <Demo>
            <div class="form-demo">
                <div class="form-section">
                    <h4>Shopping Calculator</h4>
                    <div class="form-group">
                        <label>Price per item:</label>
                        <input type="number" class="form-control" step="0.01" @bind="pricePerItem.Value" @bind:event="oninput" />
                    </div>
                    <div class="form-group">
                        <label>Quantity:</label>
                        <input type="number" class="form-control" @bind="quantity.Value" @bind:event="oninput" />
                    </div>
                    <div class="form-group">
                        <label>Tax Rate (%):</label>
                        <input type="number" class="form-control" step="0.1" @bind="taxRate.Value" @bind:event="oninput" />
                    </div>
                    <div class="form-group">
                        <label>Discount (%):</label>
                        <input type="number" class="form-control" step="0.1" @bind="discountRate.Value" @bind:event="oninput" />
                    </div>
                </div>

                <div class="calculation-results">
                    <h4>Calculation Results</h4>
                    <div class="result-grid">
                        <div class="result-item">
                            <span class="label">Subtotal:</span>
                            <span class="value">${subtotal.Value:F2}</span>
                        </div>
                        <div class="result-item">
                            <span class="label">Discount:</span>
                            <span class="value">-${discountAmount.Value:F2}</span>
                        </div>
                        <div class="result-item">
                            <span class="label">Tax:</span>
                            <span class="value">+${taxAmount.Value:F2}</span>
                        </div>
                        <div class="result-item total">
                            <span class="label">Total:</span>
                            <span class="value">${total.Value:F2}</span>
                        </div>
                    </div>
                </div>
            </div>
        </Demo>
    </DemoSection>

    <DemoSection Title="Form Validation with Signals"
                 Description="Implement reactive form validation using signal subscriptions"
                 CSharpCode="@formValidationCode"
                 RazorCode="@formValidationRazorCode">
        <Demo>
            <div class="form-demo">
                <div class="form-section">
                    <h4>Registration Form</h4>
                    <div class="form-group">
                        <label>Username:</label>
                        <input type="text" class="form-control @(usernameError.Value ? "error" : "")" 
                               @bind="username.Value" @bind:event="oninput" />
                        @if (usernameError.Value)
                        {
                            <span class="error-message">Username must be at least 3 characters</span>
                        }
                    </div>
                    <div class="form-group">
                        <label>Password:</label>
                        <input type="password" class="form-control @(passwordError.Value ? "error" : "")" 
                               @bind="password.Value" @bind:event="oninput" />
                        @if (passwordError.Value)
                        {
                            <span class="error-message">Password must be at least 8 characters</span>
                        }
                    </div>
                    <div class="form-group">
                        <label>Confirm Password:</label>
                        <input type="password" class="form-control @(confirmPasswordError.Value ? "error" : "")" 
                               @bind="confirmPassword.Value" @bind:event="oninput" />
                        @if (confirmPasswordError.Value)
                        {
                            <span class="error-message">Passwords do not match</span>
                        }
                    </div>
                    <button class="btn btn-primary" disabled="@(!isFormValid.Value)" @onclick="SubmitForm">
                        Register
                    </button>
                </div>

                <div class="validation-status">
                    <h4>Validation Status</h4>
                    <div class="status-list">
                        <div class="status-item @(usernameError.Value ? "invalid" : "valid")">
                            @(usernameError.Value ? "❌" : "✅") Username
                        </div>
                        <div class="status-item @(passwordError.Value ? "invalid" : "valid")">
                            @(passwordError.Value ? "❌" : "✅") Password
                        </div>
                        <div class="status-item @(confirmPasswordError.Value ? "invalid" : "valid")">
                            @(confirmPasswordError.Value ? "❌" : "✅") Password Match
                        </div>
                    </div>
                    @if (formSubmitted)
                    {
                        <div class="success-message">
                            Form submitted successfully!
                        </div>
                    }
                </div>
            </div>
        </Demo>
    </DemoSection>
</div>

@code {
    // Two-way binding demo
    private TypedSignal<string> userName = new("John Doe");
    private TypedSignal<string> userEmail = new("john@example.com");
    private TypedSignal<int> userAge = new(25);
    private TypedSignal<bool> newsletter = new(true);

    // Computed form values demo
    private TypedSignal<decimal> pricePerItem = new(10.00m);
    private TypedSignal<int> quantity = new(2);
    private TypedSignal<decimal> taxRate = new(8.5m);
    private TypedSignal<decimal> discountRate = new(10m);
    private TypedSignal<decimal> subtotal = new(0);
    private TypedSignal<decimal> discountAmount = new(0);
    private TypedSignal<decimal> taxAmount = new(0);
    private TypedSignal<decimal> total = new(0);

    // Form validation demo
    private TypedSignal<string> username = new("");
    private TypedSignal<string> password = new("");
    private TypedSignal<string> confirmPassword = new("");
    private TypedSignal<bool> usernameError = new(true);
    private TypedSignal<bool> passwordError = new(true);
    private TypedSignal<bool> confirmPasswordError = new(true);
    private TypedSignal<bool> isFormValid = new(false);
    private bool formSubmitted = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Setup computed values
        SetupComputedValues();

        // Setup form validation
        SetupFormValidation();

        // Subscribe to all signals for UI updates
        SubscribeAllSignals();
    }

    private void SetupComputedValues()
    {
        Action updateCalculations = () =>
        {
            subtotal.Value = pricePerItem.Value * quantity.Value;
            discountAmount.Value = subtotal.Value * (discountRate.Value / 100);
            var afterDiscount = subtotal.Value - discountAmount.Value;
            taxAmount.Value = afterDiscount * (taxRate.Value / 100);
            total.Value = afterDiscount + taxAmount.Value;
        };

        // Use base class subscription methods - no need for manual StateHasChanged
        SubscribeToSignalWithoutUpdate(pricePerItem, _ => updateCalculations());
        SubscribeToSignalWithoutUpdate(quantity, _ => updateCalculations());
        SubscribeToSignalWithoutUpdate(taxRate, _ => updateCalculations());
        SubscribeToSignalWithoutUpdate(discountRate, _ => updateCalculations());

        // Initial calculation
        updateCalculations();
    }

    private void SetupFormValidation()
    {
        // Username validation - use WithoutUpdate since we update other signals that trigger UI updates
        SubscribeToSignalWithoutUpdate(username, value =>
        {
            usernameError.Value = value.Length < 3;
            CheckFormValidity();
            formSubmitted = false; // Reset submission status when user types
        });

        // Password validation
        SubscribeToSignalWithoutUpdate(password, value =>
        {
            passwordError.Value = value.Length < 8;
            CheckPasswordMatch();
            CheckFormValidity();
            formSubmitted = false; // Reset submission status when user types
        });

        // Confirm password validation
        SubscribeToSignalWithoutUpdate(confirmPassword, value =>
        {
            CheckPasswordMatch();
            CheckFormValidity();
            formSubmitted = false; // Reset submission status when user types
        });
    }

    private void CheckPasswordMatch()
    {
        confirmPasswordError.Value = password.Value != confirmPassword.Value || string.IsNullOrEmpty(confirmPassword.Value);
    }

    private void CheckFormValidity()
    {
        isFormValid.Value = !usernameError.Value && !passwordError.Value && !confirmPasswordError.Value;
    }

    private void SubscribeAllSignals()
    {
        // Subscribe all signals to trigger UI updates using the base class method
        SubscribeForUpdate(
            userName, userEmail, userAge, newsletter,
            pricePerItem, quantity, taxRate, discountRate,
            subtotal, discountAmount, taxAmount, total,
            username, password, confirmPassword,
            usernameError, passwordError, confirmPasswordError, isFormValid
        );
    }

    private void SubmitForm()
    {
        if (isFormValid.Value)
        {
            formSubmitted = true;
            // In a real app, you would submit the form data here
        }
    }

    // Code examples
    private string formBindingCode = @"using FluentSignals.Implementations.Core;

public partial class FormBindingDemo
{
    // Create signals for form fields
    private TypedSignal<string> userName = new(""John Doe"");
    private TypedSignal<string> userEmail = new(""john@example.com"");
    private TypedSignal<int> userAge = new(25);
    private TypedSignal<bool> newsletter = new(true);

    protected override void OnInitialized()
    {
        // Subscribe to changes for logging or side effects
        userName.Subscribe(name => 
            Console.WriteLine($""Name changed to: {name}""));
            
        userEmail.Subscribe(email => 
            Console.WriteLine($""Email changed to: {email}""));
    }
}";

    private string formBindingRazorCode = @"<!-- Two-way binding with signals -->
<div class=""form-group"">
    <label>Name:</label>
    <input type=""text"" @bind=""userName.Value"" @bind:event=""oninput"" />
</div>

<div class=""form-group"">
    <label>Email:</label>
    <input type=""email"" @bind=""userEmail.Value"" @bind:event=""oninput"" />
</div>

<div class=""form-group"">
    <label>Age:</label>
    <input type=""number"" @bind=""userAge.Value"" @bind:event=""oninput"" />
</div>

<div class=""form-group"">
    <label>
        <input type=""checkbox"" @bind=""newsletter.Value"" />
        Subscribe to newsletter
    </label>
</div>

<!-- Live preview updates automatically -->
<div class=""preview"">
    <p>Name: @userName.Value</p>
    <p>Email: @userEmail.Value</p>
    <p>Age: @userAge.Value</p>
    <p>Newsletter: @(newsletter.Value ? ""Yes"" : ""No"")</p>
</div>";

    private string computedFormCode = @"using FluentSignals.Implementations.Core;

public partial class ComputedFormDemo
{
    // Form input signals
    private TypedSignal<decimal> pricePerItem = new(10.00m);
    private TypedSignal<int> quantity = new(2);
    private TypedSignal<decimal> taxRate = new(8.5m);
    private TypedSignal<decimal> discountRate = new(10m);
    
    // Computed signals
    private TypedSignal<decimal> subtotal = new(0);
    private TypedSignal<decimal> discountAmount = new(0);
    private TypedSignal<decimal> taxAmount = new(0);
    private TypedSignal<decimal> total = new(0);

    protected override void OnInitialized()
    {
        // Setup reactive calculations
        Action updateCalculations = () =>
        {
            subtotal.Value = pricePerItem.Value * quantity.Value;
            discountAmount.Value = subtotal.Value * (discountRate.Value / 100);
            var afterDiscount = subtotal.Value - discountAmount.Value;
            taxAmount.Value = afterDiscount * (taxRate.Value / 100);
            total.Value = afterDiscount + taxAmount.Value;
        };

        // Subscribe to all inputs
        pricePerItem.Subscribe(_ => updateCalculations());
        quantity.Subscribe(_ => updateCalculations());
        taxRate.Subscribe(_ => updateCalculations());
        discountRate.Subscribe(_ => updateCalculations());
        
        // Initial calculation
        updateCalculations();
    }
}";

    private string computedFormRazorCode = @"<!-- Input fields -->
<div class=""form-group"">
    <label>Price per item:</label>
    <input type=""number"" step=""0.01"" 
           @bind=""pricePerItem.Value"" @bind:event=""oninput"" />
</div>

<div class=""form-group"">
    <label>Quantity:</label>
    <input type=""number"" 
           @bind=""quantity.Value"" @bind:event=""oninput"" />
</div>

<!-- Computed values update automatically -->
<div class=""results"">
    <div>Subtotal: $@subtotal.Value</div>
    <div>Discount: -$@discountAmount.Value</div>
    <div>Tax: +$@taxAmount.Value</div>
    <div class=""total"">Total: $@total.Value</div>
</div>";

    private string formValidationCode = @"using FluentSignals.Implementations.Core;

public partial class FormValidationDemo
{
    // Form fields
    private TypedSignal<string> username = new("""");
    private TypedSignal<string> password = new("""");
    private TypedSignal<string> confirmPassword = new("""");
    
    // Validation states
    private TypedSignal<bool> usernameError = new(true);
    private TypedSignal<bool> passwordError = new(true);
    private TypedSignal<bool> confirmPasswordError = new(true);
    private TypedSignal<bool> isFormValid = new(false);

    protected override void OnInitialized()
    {
        // Username validation
        username.Subscribe(value =>
        {
            usernameError.Value = value.Length < 3;
            UpdateFormValidity();
        });

        // Password validation
        password.Subscribe(value =>
        {
            passwordError.Value = value.Length < 8;
            CheckPasswordMatch();
            UpdateFormValidity();
        });

        // Confirm password validation
        confirmPassword.Subscribe(_ =>
        {
            CheckPasswordMatch();
            UpdateFormValidity();
        });
    }

    private void CheckPasswordMatch()
    {
        confirmPasswordError.Value = 
            password.Value != confirmPassword.Value || 
            string.IsNullOrEmpty(confirmPassword.Value);
    }

    private void UpdateFormValidity()
    {
        isFormValid.Value = 
            !usernameError.Value && 
            !passwordError.Value && 
            !confirmPasswordError.Value;
    }
}";

    private string formValidationRazorCode = @"<!-- Form with validation -->
<div class=""form-group"">
    <label>Username:</label>
    <input type=""text"" 
           class=""@(usernameError.Value ? ""error"" : """")"" 
           @bind=""username.Value"" @bind:event=""oninput"" />
    @if (usernameError.Value)
    {
        <span class=""error-message"">
            Username must be at least 3 characters
        </span>
    }
</div>

<!-- Submit button enabled by validation -->
<button class=""btn btn-primary"" 
        disabled=""@(!isFormValid.Value)"" 
        @onclick=""SubmitForm"">
    Register
</button>

<!-- Validation status -->
<div class=""validation-status"">
    <div class=""@(usernameError.Value ? ""invalid"" : ""valid"")"">
        @(usernameError.Value ? ""❌"" : ""✅"") Username
    </div>
    <!-- More validation items... -->
</div>";
}

<style>
    .demo-page {
        max-width: 1400px;
        margin: 0 auto;
        padding: 2rem;
    }

    .page-header {
        margin-bottom: 3rem;
    }

    .page-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 0.5rem;
    }

    .page-header .lead {
        font-size: 1.25rem;
        color: #64748b;
    }

    .form-demo {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        align-items: start;
    }

    .form-section, .preview-section, .calculation-results, .validation-status {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        border: 1px solid #e5e7eb;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }

    .form-section h4, .preview-section h4, .calculation-results h4, .validation-status h4 {
        margin-top: 0;
        margin-bottom: 1.5rem;
        color: #1e293b;
        font-size: 1.25rem;
    }

    .form-group {
        margin-bottom: 1.25rem;
    }

    .form-group:last-child {
        margin-bottom: 0;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #374151;
        font-size: 0.875rem;
    }

    .form-control {
        width: 100%;
        padding: 0.625rem 0.875rem;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.2s;
        background-color: white;
    }

    .form-control:hover {
        border-color: #d1d5db;
    }

    .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .form-control.error {
        border-color: #ef4444;
        background-color: #fef2f2;
    }

    .form-control.error:focus {
        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
    }

    input[type="checkbox"] {
        width: 1.25rem;
        height: 1.25rem;
        margin-right: 0.5rem;
        cursor: pointer;
        vertical-align: middle;
    }

    .error-message {
        color: #ef4444;
        font-size: 0.75rem;
        margin-top: 0.375rem;
        display: block;
        font-weight: 500;
    }

    .preview-card {
        background: #f8fafc;
        padding: 1.25rem;
        border-radius: 8px;
        border: 1px solid #e5e7eb;
    }

    .preview-item {
        padding: 0.75rem 0;
        border-bottom: 1px solid #e5e7eb;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .preview-item:last-child {
        border-bottom: none;
    }

    .preview-item strong {
        color: #64748b;
        font-weight: 500;
        font-size: 0.875rem;
    }

    .result-grid {
        display: grid;
        gap: 0.75rem;
    }

    .result-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background: #f8fafc;
        border-radius: 8px;
        border: 1px solid #e5e7eb;
        transition: all 0.2s;
    }

    .result-item:hover {
        background: #f1f5f9;
    }

    .result-item .label {
        font-weight: 500;
        color: #64748b;
        font-size: 0.875rem;
    }

    .result-item .value {
        font-weight: 600;
        color: #1e293b;
    }

    .result-item.total {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        font-size: 1.125rem;
        border: none;
        margin-top: 0.5rem;
    }

    .result-item.total .label,
    .result-item.total .value {
        color: white;
    }

    .status-list {
        display: grid;
        gap: 0.75rem;
        margin-top: 1rem;
    }

    .status-item {
        padding: 0.75rem 1rem;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.2s;
        font-size: 0.875rem;
    }

    .status-item.valid {
        background: #f0fdf4;
        color: #16a34a;
        border: 1px solid #bbf7d0;
    }

    .status-item.invalid {
        background: #fef2f2;
        color: #dc2626;
        border: 1px solid #fecaca;
    }

    .success-message {
        margin-top: 1.5rem;
        padding: 1rem;
        background: #f0fdf4;
        color: #16a34a;
        border-radius: 8px;
        text-align: center;
        font-weight: 600;
        border: 1px solid #bbf7d0;
        animation: slideIn 0.3s ease-out;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .btn {
        padding: 0.625rem 1.5rem;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: all 0.2s;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .btn-primary:hover:not([disabled]) {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    }

    .btn[disabled] {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none !important;
    }

    /* Responsive styles */
    @@media (max-width: 1024px) {
        .demo-page {
            padding: 1.5rem;
        }

        .form-demo {
            gap: 1.5rem;
        }
    }

    @@media (max-width: 768px) {
        .demo-page {
            padding: 1rem;
        }

        .page-header h1 {
            font-size: 2rem;
        }

        .page-header .lead {
            font-size: 1.125rem;
        }

        .form-demo {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .form-section, .preview-section, .calculation-results, .validation-status {
            padding: 1.25rem;
        }

        .form-section h4, .preview-section h4, .calculation-results h4, .validation-status h4 {
            font-size: 1.125rem;
            margin-bottom: 1rem;
        }

        .result-item.total {
            font-size: 1rem;
        }
    }

    @@media (max-width: 480px) {
        .demo-page {
            padding: 0.5rem;
        }

        .page-header {
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .page-header h1 {
            font-size: 1.75rem;
            line-height: 1.3;
        }

        .page-header .lead {
            font-size: 1rem;
            padding: 0 0.5rem;
        }

        .form-section, .preview-section, .calculation-results, .validation-status {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .form-control {
            padding: 0.625rem 0.75rem;
            font-size: 16px; /* Prevents zoom on iOS */
        }

        .btn {
            width: 100%;
            padding: 0.75rem 1.25rem;
        }

        .preview-item {
            padding: 0.625rem 0;
        }

        .preview-item strong {
            min-width: 80px;
        }

        .result-item {
            padding: 0.75rem;
            font-size: 0.875rem;
        }

        .result-item.total {
            padding: 1rem;
        }

        .status-item {
            padding: 0.625rem 0.875rem;
            font-size: 0.8125rem;
        }

        /* Better spacing for form groups */
        .form-group {
            margin-bottom: 1.125rem;
        }

        /* Improve checkbox alignment */
        .form-group label input[type="checkbox"] {
            margin-top: 0.125rem;
        }
    }

    /* Additional mobile improvements */
    @@media (max-width: 360px) {
        .page-header h1 {
            font-size: 1.25rem;
        }

        .form-section, .preview-section, .calculation-results, .validation-status {
            padding: 0.75rem;
        }

        .form-control {
            padding: 0.5rem 0.625rem;
        }

        .btn {
            padding: 0.625rem 0.875rem;
        }

        .result-item {
            padding: 0.5rem 0.625rem;
        }

        .status-item {
            padding: 0.375rem 0.625rem;
        }
    }

    /* Touch-friendly improvements */
    @@media (hover: none) and (pointer: coarse) {
        .form-control {
            min-height: 44px;
            font-size: 16px; /* Prevents zoom on iOS */
        }

        .btn {
            min-height: 48px;
        }

        input[type="checkbox"] {
            width: 24px;
            height: 24px;
            margin-right: 0.75rem;
        }

        /* Larger touch targets */
        .form-group label {
            padding: 0.25rem 0;
        }
    }

    /* Dark mode support */
    @@media (prefers-color-scheme: dark) {
        .form-section, .preview-section, .calculation-results, .validation-status {
            background: #1e293b;
            border-color: #334155;
        }

        .form-section h4, .preview-section h4, .calculation-results h4, .validation-status h4 {
            color: #f1f5f9;
        }

        .form-control {
            background-color: #0f172a;
            border-color: #334155;
            color: #f1f5f9;
        }

        .form-control:hover {
            border-color: #475569;
        }

        .form-control:focus {
            border-color: #667eea;
        }

        .preview-card {
            background: #0f172a;
            border-color: #334155;
        }

        .preview-item {
            border-color: #334155;
        }

        .result-item {
            background: #0f172a;
            border-color: #334155;
        }

        .result-item:hover {
            background: #1e293b;
        }

        .result-item .value {
            color: #f1f5f9;
        }
    }
}</style>
