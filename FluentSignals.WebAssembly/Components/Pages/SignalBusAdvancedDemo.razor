@page "/signalbus-advanced"
@using FluentSignals.Blazor.SignalBus
@using FluentSignals.WebAssembly.Models
@using System.Text.Json
@implements IDisposable

<PageTitle>Advanced SignalBus Features - FluentSignals</PageTitle>

<div class="advanced-demo-page">
    <div class="demo-header">
        <h1>Advanced SignalBus Features</h1>
        <p class="lead">Explore middleware, batching, request-response, and more</p>
    </div>

    <div class="features-grid">
        <!-- Middleware Demo -->
        <div class="feature-panel">
            <div class="panel-header">
                <h3>üîó Middleware Pipeline</h3>
                <span class="status @(middlewareEnabled ? "active" : "")">
                    @(middlewareEnabled ? "Active" : "Inactive")
                </span>
            </div>
            <div class="panel-body">
                <p>Messages pass through logging and validation middleware.</p>
                <label class="toggle-container">
                    <input type="checkbox" @bind="middlewareEnabled" />
                    <span>Enable Middleware</span>
                </label>
                
                @if (middlewareLogs.Any())
                {
                    <div class="log-container">
                        @foreach (var log in middlewareLogs.TakeLast(5))
                        {
                            <div class="log-entry">@log</div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Batching Demo -->
        <div class="feature-panel">
            <div class="panel-header">
                <h3>üì¶ Smart Batching</h3>
                <span class="batch-count">@currentBatchSize msgs</span>
            </div>
            <div class="panel-body">
                <p>High-frequency messages are automatically batched.</p>
                <button class="btn btn-primary" @onclick="SendBatchedMessages">
                    Send 50 Messages
                </button>
                
                <div class="batch-stats">
                    <div class="stat">
                        <span class="label">Batches Processed:</span>
                        <span class="value">@batchesProcessed</span>
                    </div>
                    <div class="stat">
                        <span class="label">Messages Batched:</span>
                        <span class="value">@totalMessagesBatched</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Request-Response Demo -->
        <div class="feature-panel">
            <div class="panel-header">
                <h3>üì® Request-Response</h3>
                <span class="response-time">@lastResponseTime</span>
            </div>
            <div class="panel-body">
                <p>Send requests and await responses with timeout.</p>
                <div class="input-group">
                    <input type="text" @bind="requestInput" placeholder="Enter name" />
                    <button class="btn btn-primary" @onclick="SendRequest" disabled="@isRequesting">
                        @(isRequesting ? "Requesting..." : "Send Request")
                    </button>
                </div>
                
                @if (!string.IsNullOrEmpty(lastResponse))
                {
                    <div class="response-display">
                        <strong>Response:</strong> @lastResponse
                    </div>
                }
            </div>
        </div>

        <!-- Deduplication Demo -->
        <div class="feature-panel">
            <div class="panel-header">
                <h3>üîÑ Deduplication</h3>
                <span class="dedup-indicator @(isDedupActive ? "active" : "")">
                    @(isDedupActive ? "Active" : "Inactive")
                </span>
            </div>
            <div class="panel-body">
                <p>Duplicate messages are automatically filtered.</p>
                <button class="btn btn-primary" @onclick="SendDuplicateMessages">
                    Send Duplicate Messages
                </button>
                
                <div class="dedup-stats">
                    <div class="stat">
                        <span class="label">Sent:</span>
                        <span class="value">@messagesSent</span>
                    </div>
                    <div class="stat">
                        <span class="label">Received:</span>
                        <span class="value">@messagesReceived</span>
                    </div>
                    <div class="stat">
                        <span class="label">Deduplicated:</span>
                        <span class="value">@(messagesSent - messagesReceived)</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Metrics Dashboard -->
        <div class="feature-panel metrics-panel">
            <div class="panel-header">
                <h3>üìä Live Metrics</h3>
                <button class="btn btn-sm" @onclick="RefreshMetrics">Refresh</button>
            </div>
            <div class="panel-body">
                @if (metrics != null)
                {
                    <div class="metrics-grid">
                        <div class="metric">
                            <span class="metric-value">@metrics.TotalMessagesPublished</span>
                            <span class="metric-label">Published</span>
                        </div>
                        <div class="metric">
                            <span class="metric-value">@metrics.TotalMessagesProcessed</span>
                            <span class="metric-label">Processed</span>
                        </div>
                        <div class="metric">
                            <span class="metric-value">@metrics.ActiveSubscriptions</span>
                            <span class="metric-label">Subscriptions</span>
                        </div>
                        <div class="metric">
                            <span class="metric-value">@metrics.ErrorCount</span>
                            <span class="metric-label">Errors</span>
                        </div>
                    </div>
                    
                    @if (metrics.MessageTypeMetrics?.Any() == true)
                    {
                        <h4>Message Types</h4>
                        <div class="type-metrics">
                            @foreach (var typeMetric in metrics.MessageTypeMetrics)
                            {
                                <div class="type-metric">
                                    <span class="type-name">@typeMetric.Key.Name</span>
                                    <span class="type-count">@typeMetric.Value.ProcessedCount</span>
                                </div>
                            }
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Configuration Status -->
        <div class="feature-panel config-panel">
            <div class="panel-header">
                <h3>‚öôÔ∏è Configuration</h3>
            </div>
            <div class="panel-body">
                <div class="config-list">
                    <div class="config-item">
                        <span class="config-key">Auto-Registration:</span>
                        <span class="config-value @(configStatus.AutoRegistration ? "enabled" : "disabled")">
                            @(configStatus.AutoRegistration ? "Enabled" : "Disabled")
                        </span>
                    </div>
                    <div class="config-item">
                        <span class="config-key">Deduplication:</span>
                        <span class="config-value @(configStatus.Deduplication ? "enabled" : "disabled")">
                            @(configStatus.Deduplication ? "Enabled" : "Disabled")
                        </span>
                    </div>
                    <div class="config-item">
                        <span class="config-key">Metrics:</span>
                        <span class="config-value @(configStatus.Metrics ? "enabled" : "disabled")">
                            @(configStatus.Metrics ? "Enabled" : "Disabled")
                        </span>
                    </div>
                    <div class="config-item">
                        <span class="config-key">Batching:</span>
                        <span class="config-value @(configStatus.Batching ? "enabled" : "disabled")">
                            @(configStatus.Batching ? "Enabled" : "Disabled")
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private ISignalPublisher SignalPublisher { get; set; } = default!;
    [Inject] private ISignalBus SignalBus { get; set; } = default!;
    [Inject] private ILogger<SignalBusAdvancedDemo> Logger { get; set; } = default!;

    // State
    private bool middlewareEnabled = true;
    private List<string> middlewareLogs = new();
    
    private int currentBatchSize = 0;
    private int batchesProcessed = 0;
    private int totalMessagesBatched = 0;
    
    private string requestInput = "";
    private string lastResponse = "";
    private string lastResponseTime = "--ms";
    private bool isRequesting = false;
    
    private bool isDedupActive = true;
    private int messagesSent = 0;
    private int messagesReceived = 0;
    
    private MessageBusMetrics? metrics;
    private ConfigurationStatus configStatus = new();
    
    private List<IDisposable> subscriptions = new();

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to middleware logs
        var logConsumer = SignalBus.GetConsumer<MiddlewareLogMessage>();
        subscriptions.Add(logConsumer.SubscribeDisposable(msg =>
        {
            if (middlewareEnabled)
            {
                middlewareLogs.Add($"[{msg.Timestamp:HH:mm:ss}] {msg.Message}");
                InvokeAsync(StateHasChanged);
            }
        }));

        // Subscribe to batch notifications
        var batchConsumer = SignalBus.GetConsumer<BatchProcessedMessage>();
        subscriptions.Add(batchConsumer.SubscribeDisposable(msg =>
        {
            batchesProcessed++;
            totalMessagesBatched += msg.MessageCount;
            currentBatchSize = msg.MessageCount;
            InvokeAsync(StateHasChanged);
        }));

        // Subscribe to test messages for deduplication
        var testConsumer = SignalBus.GetConsumer<TestMessage>();
        subscriptions.Add(testConsumer.SubscribeDisposable(msg =>
        {
            messagesReceived++;
            InvokeAsync(StateHasChanged);
        }));

        // Load initial metrics
        await RefreshMetrics();
    }

    private async Task SendBatchedMessages()
    {
        // Send many messages quickly to trigger batching
        var tasks = new List<Task>();
        for (int i = 0; i < 50; i++)
        {
            tasks.Add(SignalPublisher.PublishAsync(new BatchTestMessage { Id = i, Value = $"Message {i}" }));
        }
        await Task.WhenAll(tasks);
    }

    private async Task SendRequest()
    {
        if (string.IsNullOrWhiteSpace(requestInput) || isRequesting) return;

        isRequesting = true;
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        try
        {
            // This would use the RequestResponseService in a real implementation
            var request = new GreetingRequest { Name = requestInput };
            
            // Simulate request-response
            await Task.Delay(Random.Shared.Next(100, 500));
            lastResponse = $"Hello, {request.Name}! (Processed by handler)";
            
            stopwatch.Stop();
            lastResponseTime = $"{stopwatch.ElapsedMilliseconds}ms";
        }
        catch (TimeoutException)
        {
            lastResponse = "Request timed out!";
            lastResponseTime = "timeout";
        }
        finally
        {
            isRequesting = false;
            requestInput = "";
        }
    }

    private async Task SendDuplicateMessages()
    {
        messagesSent = 0;
        messagesReceived = 0;

        // Send the same message multiple times
        var message = new TestMessage { Id = Guid.NewGuid(), Content = "Duplicate Test" };
        
        for (int i = 0; i < 5; i++)
        {
            await SignalPublisher.PublishAsync(message);
            messagesSent++;
            await Task.Delay(100); // Small delay between sends
        }
    }

    private async Task RefreshMetrics()
    {
        // Get metrics from SignalBus
        metrics = SignalBus.GetMetrics();
        
        // Check configuration status
        configStatus = new ConfigurationStatus
        {
            AutoRegistration = true, // These would check actual config
            Deduplication = true,
            Metrics = true,
            Batching = true
        };
        
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        foreach (var subscription in subscriptions)
        {
            subscription?.Dispose();
        }
    }

    // Message types
    public class MiddlewareLogMessage
    {
        public DateTime Timestamp { get; set; }
        public string Message { get; set; } = "";
    }

    public class BatchTestMessage
    {
        public int Id { get; set; }
        public string Value { get; set; } = "";
    }

    public class BatchProcessedMessage
    {
        public int MessageCount { get; set; }
        public DateTime Timestamp { get; set; }
    }

    public class TestMessage
    {
        public Guid Id { get; set; }
        public string Content { get; set; } = "";
    }

    public class GreetingRequest
    {
        public string Name { get; set; } = "";
    }

    public class GreetingResponse
    {
        public string Message { get; set; } = "";
    }

    public class ConfigurationStatus
    {
        public bool AutoRegistration { get; set; }
        public bool Deduplication { get; set; }
        public bool Metrics { get; set; }
        public bool Batching { get; set; }
    }
}

<style>
    .advanced-demo-page {
        padding: 2rem;
        background: #f8fafc;
        min-height: 100vh;
    }

    .demo-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .demo-header h1 {
        font-size: 2.5rem;
        color: #1e293b;
        margin-bottom: 0.5rem;
    }

    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
        gap: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .feature-panel {
        background: white;
        border-radius: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }

    .metrics-panel, .config-panel {
        grid-column: span 2;
    }

    .panel-header {
        padding: 1rem 1.5rem;
        background: #f8fafc;
        border-bottom: 1px solid #e5e7eb;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .panel-header h3 {
        margin: 0;
        font-size: 1.25rem;
        color: #1e293b;
    }

    .panel-body {
        padding: 1.5rem;
    }

    .status {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        background: #e5e7eb;
        color: #64748b;
    }

    .status.active {
        background: #10b981;
        color: white;
    }

    .toggle-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin: 1rem 0;
        cursor: pointer;
    }

    .log-container {
        margin-top: 1rem;
        background: #1e293b;
        border-radius: 8px;
        padding: 1rem;
        font-family: monospace;
        font-size: 0.75rem;
        color: #e2e8f0;
        max-height: 150px;
        overflow-y: auto;
    }

    .log-entry {
        margin-bottom: 0.25rem;
    }

    .batch-count {
        background: #3b82f6;
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.875rem;
    }

    .batch-stats, .dedup-stats {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-top: 1rem;
    }

    .stat {
        text-align: center;
        padding: 0.75rem;
        background: #f8fafc;
        border-radius: 8px;
    }

    .stat .label {
        display: block;
        font-size: 0.75rem;
        color: #64748b;
        margin-bottom: 0.25rem;
    }

    .stat .value {
        display: block;
        font-size: 1.5rem;
        font-weight: 700;
        color: #1e293b;
    }

    .input-group {
        display: flex;
        gap: 0.5rem;
        margin: 1rem 0;
    }

    .input-group input {
        flex: 1;
        padding: 0.5rem;
        border: 1px solid #e5e7eb;
        border-radius: 6px;
    }

    .response-time {
        background: #8b5cf6;
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.875rem;
    }

    .response-display {
        margin-top: 1rem;
        padding: 1rem;
        background: #f0f9ff;
        border-radius: 8px;
        color: #0369a1;
    }

    .dedup-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background: #e5e7eb;
    }

    .dedup-indicator.active {
        background: #10b981;
        box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.2);
    }

    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .metric {
        text-align: center;
        padding: 1.5rem;
        background: #f8fafc;
        border-radius: 8px;
    }

    .metric-value {
        display: block;
        font-size: 2rem;
        font-weight: 700;
        color: #667eea;
        margin-bottom: 0.25rem;
    }

    .metric-label {
        display: block;
        font-size: 0.875rem;
        color: #64748b;
    }

    .type-metrics {
        display: grid;
        gap: 0.5rem;
    }

    .type-metric {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem;
        background: #f8fafc;
        border-radius: 6px;
    }

    .type-name {
        color: #475569;
        font-size: 0.875rem;
    }

    .type-count {
        color: #667eea;
        font-weight: 600;
    }

    .config-list {
        display: grid;
        gap: 0.75rem;
    }

    .config-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        background: #f8fafc;
        border-radius: 6px;
    }

    .config-key {
        font-weight: 600;
        color: #475569;
    }

    .config-value {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.875rem;
    }

    .config-value.enabled {
        background: #d1fae5;
        color: #065f46;
    }

    .config-value.disabled {
        background: #fee2e2;
        color: #991b1b;
    }

    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-primary {
        background: #667eea;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: #5a67d8;
    }

    .btn-primary:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .btn-sm {
        padding: 0.25rem 0.75rem;
        font-size: 0.875rem;
    }

    @@media (max-width: 768px) {
        .features-grid {
            grid-template-columns: 1fr;
        }

        .metrics-panel, .config-panel {
            grid-column: span 1;
        }

        .metrics-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }
</style>