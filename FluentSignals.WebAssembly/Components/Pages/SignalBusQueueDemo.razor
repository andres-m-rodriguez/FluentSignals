@page "/signalbus-queue"
@using FluentSignals.Blazor.SignalBus
@using FluentSignals.WebAssembly.Models
@implements IDisposable

<PageTitle>SignalBus Queue-Based Subscription - FluentSignals</PageTitle>

<div class="queue-demo-page">
    <div class="demo-header">
        <h1>Queue-Based Subscription Demo</h1>
        <p class="lead">Messages are queued and delivered even if subscribers aren't active when published</p>
    </div>

    <div class="demo-grid">
        <!-- Publisher Section -->
        <div class="demo-section publisher-section">
            <h3>Publisher</h3>
            <div class="form-group">
                <label>Name:</label>
                <input type="text" @bind="newPerson.Name" placeholder="Enter name" />
            </div>
            <div class="form-group">
                <label>Age:</label>
                <input type="number" @bind="newPerson.Age" min="1" max="120" />
            </div>
            <button class="btn btn-primary" @onclick="PublishPerson">
                Publish Person
            </button>
            <p class="publish-count">Published: @publishedCount messages</p>
        </div>

        <!-- Consumer 1: Real-time Subscriber -->
        <div class="demo-section consumer-section">
            <h3>Consumer 1: Real-time Subscriber</h3>
            <div class="controls">
                <label class="toggle">
                    <input type="checkbox" @bind="isConsumer1Active" />
                    <span>@(isConsumer1Active ? "Active" : "Inactive")</span>
                </label>
            </div>
            <div class="people-list">
                <h4>Received People (@realTimePeople.Count)</h4>
                @foreach (var person in realTimePeople)
                {
                    <div class="person-card">
                        <span class="name">@person.Name</span>
                        <span class="age">Age: @person.Age</span>
                    </div>
                }
            </div>
        </div>

        <!-- Consumer 2: Queue-based Subscriber -->
        <div class="demo-section consumer-section">
            <h3>Consumer 2: Queue-based Subscriber</h3>
            <div class="controls">
                <label class="toggle">
                    <input type="checkbox" @bind="isConsumer2Active" />
                    <span>@(isConsumer2Active ? "Active" : "Inactive")</span>
                </label>
                <button class="btn btn-secondary" @onclick="ActivateQueueSubscriber" disabled="@isConsumer2Active">
                    Activate & Process Queue
                </button>
            </div>
            <div class="people-list">
                <h4>Received People (@queuedPeople.Count)</h4>
                @foreach (var person in queuedPeople)
                {
                    <div class="person-card">
                        <span class="name">@person.Name</span>
                        <span class="age">Age: @person.Age</span>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="scenario-section">
        <h3>Try This Scenario</h3>
        <ol>
            <li>Make sure Consumer 1 is active and publish a few people - they appear immediately</li>
            <li>Deactivate Consumer 1 and Consumer 2</li>
            <li>Publish more people while both consumers are inactive</li>
            <li>Activate Consumer 1 - it won't receive the messages published while inactive</li>
            <li>Click "Activate & Process Queue" for Consumer 2 - it receives ALL messages, including those published while inactive</li>
        </ol>
    </div>
</div>

@code {
    [Inject] private ISignalPublisher SignalPublisher { get; set; } = default!;
    [Inject] private ISignalConsumer<PersonForAddDto> SignalConsumer { get; set; } = default!;

    private PersonForAddDto newPerson = new() { Name = "John Doe", Age = 30 };
    private List<PersonForAddDto> realTimePeople = new();
    private List<PersonForAddDto> queuedPeople = new();
    
    private bool isConsumer1Active = true;
    private bool isConsumer2Active = false;
    
    private IDisposable? consumer1Subscription;
    private IDisposable? consumer2Subscription;
    
    private int publishedCount = 0;

    protected override void OnInitialized()
    {
        // Consumer 1 starts active with real-time subscription
        if (isConsumer1Active)
        {
            consumer1Subscription = SignalConsumer.Subscribe(message =>
            {
                realTimePeople.Add(message);
                InvokeAsync(StateHasChanged);
            });
        }
    }

    private async Task PublishPerson()
    {
        var person = new PersonForAddDto
        {
            Name = newPerson.Name,
            Age = newPerson.Age
        };

        await SignalPublisher.PublishAsync(person);
        publishedCount++;
        
        // Reset form
        newPerson = new() { Name = $"Person {publishedCount + 1}", Age = Random.Shared.Next(18, 80) };
    }

    private void ActivateQueueSubscriber()
    {
        if (!isConsumer2Active)
        {
            isConsumer2Active = true;
            
            // Use SubscribeByQueue to receive all messages, including those published before subscription
            consumer2Subscription = SignalConsumer.SubscribeByQueue(message =>
            {
                queuedPeople.Add(message);
                InvokeAsync(StateHasChanged);
            }, processExistingMessages: true);
        }
    }

    private void UpdateConsumer1State()
    {
        if (isConsumer1Active && consumer1Subscription == null)
        {
            // Regular subscription - only receives new messages
            consumer1Subscription = SignalConsumer.Subscribe(message =>
            {
                realTimePeople.Add(message);
                InvokeAsync(StateHasChanged);
            });
        }
        else if (!isConsumer1Active && consumer1Subscription != null)
        {
            consumer1Subscription.Dispose();
            consumer1Subscription = null;
        }
    }

    private void UpdateConsumer2State()
    {
        if (isConsumer2Active && consumer2Subscription == null)
        {
            ActivateQueueSubscriber();
        }
        else if (!isConsumer2Active && consumer2Subscription != null)
        {
            consumer2Subscription.Dispose();
            consumer2Subscription = null;
        }
    }

    protected override void OnParametersSet()
    {
        UpdateConsumer1State();
        UpdateConsumer2State();
    }

    public void Dispose()
    {
        consumer1Subscription?.Dispose();
        consumer2Subscription?.Dispose();
    }
}

<style>
    .queue-demo-page {
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .demo-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .demo-header h1 {
        font-size: 2.5rem;
        color: #1e293b;
        margin-bottom: 0.5rem;
    }

    .lead {
        font-size: 1.25rem;
        color: #64748b;
    }

    .demo-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .demo-section {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .demo-section h3 {
        margin-top: 0;
        color: #1e293b;
        font-size: 1.25rem;
    }

    .publisher-section {
        border-top: 4px solid #3b82f6;
    }

    .consumer-section {
        border-top: 4px solid #10b981;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.25rem;
        color: #475569;
        font-weight: 500;
    }

    .form-group input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #e5e7eb;
        border-radius: 6px;
        font-size: 1rem;
    }

    .btn {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-primary {
        background: #3b82f6;
        color: white;
    }

    .btn-primary:hover {
        background: #2563eb;
    }

    .btn-secondary {
        background: #10b981;
        color: white;
        margin-top: 0.5rem;
    }

    .btn-secondary:hover:not(:disabled) {
        background: #059669;
    }

    .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .publish-count {
        margin-top: 1rem;
        color: #64748b;
        font-size: 0.875rem;
    }

    .controls {
        margin-bottom: 1rem;
    }

    .toggle {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        cursor: pointer;
    }

    .toggle input[type="checkbox"] {
        width: auto;
        margin: 0;
    }

    .toggle span {
        font-weight: 600;
        color: #64748b;
    }

    .toggle input:checked + span {
        color: #10b981;
    }

    .people-list {
        margin-top: 1rem;
    }

    .people-list h4 {
        margin: 0 0 0.75rem 0;
        color: #475569;
        font-size: 0.875rem;
        font-weight: 600;
    }

    .person-card {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        margin-bottom: 0.5rem;
        background: #f8fafc;
        border-radius: 6px;
        border: 1px solid #e5e7eb;
    }

    .person-card .name {
        font-weight: 600;
        color: #1e293b;
    }

    .person-card .age {
        color: #64748b;
        font-size: 0.875rem;
    }

    .scenario-section {
        background: #f0f9ff;
        border-radius: 12px;
        padding: 2rem;
        border: 1px solid #bae6fd;
    }

    .scenario-section h3 {
        margin-top: 0;
        color: #0369a1;
    }

    .scenario-section ol {
        margin-bottom: 0;
        padding-left: 1.5rem;
    }

    .scenario-section li {
        margin-bottom: 0.75rem;
        line-height: 1.6;
        color: #0c4a6e;
    }

    @@media (max-width: 768px) {
        .demo-grid {
            grid-template-columns: 1fr;
        }
    }
</style>